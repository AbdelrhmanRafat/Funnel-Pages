---
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import ClassicComponent from "../components/Themes/Classic/ClassicComponent.astro";

import { getFunnelPage } from "../lib/api/funnel";
import { getThemeFromString } from "../lib/utils/ThemeSelect";
import type { FunnelRes, Product } from "../lib/api/types";
import { Theme } from "../lib/constants/themes";

// === 1. Get the ID from path and validate it's a number ===
const urlParams = Astro.url.searchParams;
let themeID = urlParams.get("f") ?? "4";
const blockKeyParam = urlParams.get("blockKey");


const id = parseInt(themeID);

// Additional validation to ensure it's a positive integer
if (isNaN(id) || id <= 0) {
  return Astro.redirect("/Page404");
}

let funnelPage: FunnelRes | null = null;
let hasError = false;

try {
  funnelPage = await getFunnelPage(id);
} catch (err) {
  console.error("Error fetching funnel page:", err);
  hasError = true;
}

// === 2. Handle if data is not found or invalid ===
if (hasError || !funnelPage || !funnelPage.data || !funnelPage.data.funnel_theme) {
  return Astro.redirect("/Page404");
}

// === 3. Prepare required values ===
const strTheme: string = funnelPage.data.funnel_theme.key;
const enumTheme: Theme | undefined = getThemeFromString(strTheme);
const meta = funnelPage.data.product.meta;
const facebookPixelID = funnelPage.data.facebookPixelId;
const twitterPixelID = funnelPage.data.twitterPixelId;
const snapchatPixelID = funnelPage.data.snapchatPixelId;
const tiktokPixelID = funnelPage.data.tiktokPixelId;

// === 4. Handle unsupported themes ===
if (!enumTheme) {
  return Astro.redirect("/Page404");
}

// === 5. Filter blocks by key if blockKeyParam is provided ===
if (blockKeyParam && funnelPage.data.blocks?.length) {
  funnelPage.data.blocks = funnelPage.data.blocks.filter(
    (block) => block.key === blockKeyParam
  );
}
---
<Layout
  metadata={meta}
  strThemeName={strTheme}
  themeCss={funnelPage.data.themeCss}
  facebookPixelID={facebookPixelID}
  twitterPixelID={twitterPixelID}
  snapchatPixelID={snapchatPixelID}
  tiktokPixelID={tiktokPixelID}
>
{
  (() => {
    switch (enumTheme) {
      case Theme.Classic:
        return <ClassicComponent funnelPage={funnelPage.data} />;
      default:
        return <p>ðŸš« Theme not supported</p>;
    }
  })()
}
</Layout>
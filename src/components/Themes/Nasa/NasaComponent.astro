---
import "./NasaComponent.css";

// Nasa Component Imports
import NasaThemeHeader from "./NasaTheme/Nasa_Header/NasaThemeHeader.astro";
import NasaThemeProduct from "./NasaTheme/NasaThemeProduct/NasaThemeProduct.astro";
import NasaThemeCountDown from "./NasaTheme/NasaThemeCountdown/NasaThemeCountDown.astro";
import NasaFaq from "./NasaTheme/Nasa_Faq/NasaFaq.astro";
import NasaProductPreviewComponent from "./NasaTheme/Nasa_ProductPreview/NasaProductPreviewComponent.astro";
import { getNasaThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelNasaComponents } from "../../../lib/constants/themes";
import NasaThemeFooter from "./NasaTheme/NasaThemeFooter/NasaThemeFooter.astro";
import NasaThemeReviews from "./NasaTheme/Nasa_Theme_Reviews/NasaThemeReviews.astro";
import NasaProductUsage from "./NasaTheme/Nasa_ProductUsage/NasaProductUsage.astro";
import NasaDeliveryFeatures from "./NasaTheme/Nasa_Delivery_Features/NasaDeliveryFeatures.astro";
import NasaProductFeatures from "./NasaTheme/Nasa_Product_Features/NasaProductFeatures.astro";
import NasaThemeTextBar from "./NasaTheme/Nasa_Text_Bar/NasaThemeTextBar.astro";
import NasaThemeTodayOrders from "./NasaTheme/NasaThemeTodayOrders/NasaThemeTodayOrders.astro";
import NasaBeforeAfter from "./NasaTheme/NasaBefore&AfterImage/NasaBefore&After.astro";
import NasaImageTextOverlay from "./NasaTheme/Nasa_Image_Text_Overlay/NasaImageTextOverlay.astro";
import NasaImageTextBeside from "./NasaTheme/Nasa_Image_Text_Beside/NasaImageTextBeside.astro";

// Props
const funnelPage: Data = Astro.props.funnelPage;

interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

// Map and check component blocks
const nasaComponentNames: [FunnelNasaComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getNasaThemeComponent(block.name);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelNasaComponents, BlockData] => tuple !== undefined,
    );

function isComponentFound(componentName: FunnelNasaComponents): ComponentCheckResult {
  const found = nasaComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Order of component rendering
const RENDER_ORDER = [
  FunnelNasaComponents.NasaHeader,
  FunnelNasaComponents.NasaProductFunnel,
  FunnelNasaComponents.NasaProductFeatures,
  FunnelNasaComponents.NasaProductPreview,
  FunnelNasaComponents.NasaProductUsage,
  FunnelNasaComponents.NasaTodayOrders,
  FunnelNasaComponents.NasaBeforeAfter,
  FunnelNasaComponents.NasaReviews,
  FunnelNasaComponents.NasaTextBar,
  FunnelNasaComponents.NasaImageTextOverlay,
  FunnelNasaComponents.NasaImageTextBeside,
  FunnelNasaComponents.NasaFaq,
  FunnelNasaComponents.NasaDeliveryFeatures,
  FunnelNasaComponents.NasaCountdown,
  FunnelNasaComponents.NasaFooter,
];

// Extract common component data
const productFunnelData = isComponentFound(FunnelNasaComponents.NasaProductFunnel);
const isFormFieldsDataFound = isComponentFound(FunnelNasaComponents.NasaFormFields);
const isOrderConfirmationNoticeFound = isComponentFound(FunnelNasaComponents.NasaOrderConfirmationNotice);
const isRatingFound = isComponentFound(FunnelNasaComponents.NasaRates);
const isGalleryFound = isComponentFound(FunnelNasaComponents.NasaGallery);

const purchaseOptions = productFunnelData.isComponentFound ? productFunnelData.componentData?.purchase_options : undefined;
const formFieldsData = isFormFieldsDataFound.isComponentFound ? isFormFieldsDataFound.componentData : undefined;
const ratingData = isRatingFound.isComponentFound ? isRatingFound.componentData : undefined;
const orderConfirmationNoticeData = isOrderConfirmationNoticeFound.isComponentFound ? isOrderConfirmationNoticeFound.componentData : undefined;
const galleryData = isGalleryFound.isComponentFound ? isGalleryFound.componentData : undefined;
---

<main class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelNasaComponents.NasaHeader) {
        const headerData = isComponentFound(FunnelNasaComponents.NasaHeader);
        return headerData.isComponentFound ? (
          <NasaThemeHeader data={headerData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaProductFunnel) {
        return (
          <NasaThemeProduct
            galleryData={galleryData}
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            product={funnelPage.product}
            purchaseOptions={purchaseOptions}
          />
        );
      }

      if (componentName === FunnelNasaComponents.NasaCountdown) {
        const countdownData = isComponentFound(FunnelNasaComponents.NasaCountdown);
        return countdownData.isComponentFound ? (
          <NasaThemeCountDown data={countdownData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaFaq) {
        const faqData = isComponentFound(FunnelNasaComponents.NasaFaq);
        return faqData.isComponentFound ? (
          <NasaFaq data={faqData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaProductPreview) {
        const productPreviewData = isComponentFound(FunnelNasaComponents.NasaProductPreview);
        return productPreviewData.isComponentFound ? (
          <NasaProductPreviewComponent data={productPreviewData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaTodayOrders) {
        const todayOrdersData = isComponentFound(FunnelNasaComponents.NasaTodayOrders);
        return todayOrdersData.isComponentFound ? (
          <NasaThemeTodayOrders data={todayOrdersData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(FunnelNasaComponents.NasaDeliveryFeatures);
        return deliveryFeaturesData.isComponentFound ? (
          <NasaDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaProductFeatures) {
        const featuresData = isComponentFound(FunnelNasaComponents.NasaProductFeatures);
        return featuresData.isComponentFound ? (
          <NasaProductFeatures data={featuresData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaReviews) {
        const reviewsData = isComponentFound(FunnelNasaComponents.NasaReviews);
        return reviewsData.isComponentFound ? (
          <NasaThemeReviews data={reviewsData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaTextBar) {
        const textBarData = isComponentFound(FunnelNasaComponents.NasaTextBar);
        return textBarData.isComponentFound ? (
          <NasaThemeTextBar data={textBarData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaImageTextOverlay) {
        const overlayData = isComponentFound(FunnelNasaComponents.NasaImageTextOverlay);
        return overlayData.isComponentFound ? (
          <NasaImageTextOverlay data={overlayData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaImageTextBeside) {
        const besideData = isComponentFound(FunnelNasaComponents.NasaImageTextBeside);
        return besideData.isComponentFound ? (
          <NasaImageTextBeside data={besideData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaProductUsage) {
        const usageData = isComponentFound(FunnelNasaComponents.NasaProductUsage);
        return usageData.isComponentFound ? (
          <NasaProductUsage data={usageData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaBeforeAfter) {
        const beforeAfterData = isComponentFound(FunnelNasaComponents.NasaBeforeAfter);
        return beforeAfterData.isComponentFound ? (
          <NasaBeforeAfter data={beforeAfterData.componentData} />
        ) : null;
      }

      if (componentName === FunnelNasaComponents.NasaFooter) {
        const footerData = isComponentFound(FunnelNasaComponents.NasaFooter);
        return footerData.isComponentFound ? (
          <NasaThemeFooter data={footerData.componentData} />
        ) : null;
      }

      return null;
    })
  }

  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 scrollToTopBtn">
    <i class="fa-solid fa-up-long"></i>
  </button>
</main>

<script>
  import "./NasaTheme.config";
</script>
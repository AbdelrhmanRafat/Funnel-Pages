---
// This component is the main entry point for the Retro theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./RetroComponent.css";
import RetroThemeHeader from "./RetroTheme/Retro_Header/RetroThemeHeader.astro";
import RetroThemeProduct from "./RetroTheme/RetroThemeProduct/RetroThemeProduct.astro";
import RetroThemeCountDown from "./RetroTheme/RetroThemeCountdown/RetroThemeCountDown.astro";
import RetroFaq from "./RetroTheme/Retro_Faq/RetroFaq.astro";
import RetroProductPreviewComponent from "./RetroTheme/Retro_ProductPreview/RetroProductPreviewComponent.astro";
import { getRetroThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelRetroComponents } from "../../../lib/constants/themes";
import RetroThemeFooter from "./RetroTheme/RetroThemeFooter/RetroThemeFooter.astro";
import RetroThemeReviews from "./RetroTheme/Retro_Theme_Reviews/RetroThemeReviews.astro";
import RetroProductUsage from "./RetroTheme/Retro_ProductUsage/RetroProductUsage.astro";
import RetroDeliveryFeatures from "./RetroTheme/Retro_Delivery_Features/RetroDeliveryFeatures.astro";
import RetroProductFeatures from "./RetroTheme/Retro_Product_Features/RetroProductFeatures.astro";
import RetroThemeTodayStatistics from "./RetroTheme/RetroThemeTodayStatistics/RetroThemeTodayStatistics.astro";
import RetroLogosCarousel from "./RetroTheme/RetroLogosCarousel/RetroLogosCarousel.astro";
import RetroButtonWithLink from "./RetroTheme/RetroButtonWithLink/RetroButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import RetroGridImages from "./RetroTheme/RetroGridImagesComponent/retroGridImages.astro";
import RetroThemeTextBar from "./RetroTheme/Retro_Text_Bar/retroThemeTextBar.astro";
import RetroImageTextOverlay from "./RetroTheme/Retro_Image_Text_Overlay/retroImageTextOverlay.astro";
import RetroImageTextBeside from "./RetroTheme/Retro_Image_Text_Beside/retroImageTextBeside.astro";
import RetroBeforeAfter from "./RetroTheme/RetroBefore&AfterImage/retroBefore&After.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Retro theme components and data.
const retroComponentNames: [FunnelRetroComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getRetroThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelRetroComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelRetroComponents,
): ComponentCheckResult {
  const found = retroComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelRetroComponents.RetroHeader,
  FunnelRetroComponents.RetroProductFunnel, // Always render (required)
  FunnelRetroComponents.RetroProductFeatures,
  FunnelRetroComponents.RetroProductPreview,
  FunnelRetroComponents.RetroProductUsage,
  FunnelRetroComponents.RetroLogosCarousel,
  FunnelRetroComponents.RetroButtonWithLink,
  FunnelRetroComponents.RetroTodayStatistics,
  FunnelRetroComponents.RetroGallery,
  FunnelRetroComponents.Retro_Before_After,
  FunnelRetroComponents.RetroReviews,
  FunnelRetroComponents.RetroTextBar,
  FunnelRetroComponents.RetroImageTextOverLay,
  FunnelRetroComponents.RetroImageTextBeside,
  FunnelRetroComponents.RetroFaq,
  FunnelRetroComponents.RetroDeliveryFeatures,
  FunnelRetroComponents.RetroCountdown,
  FunnelRetroComponents.RetroFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelRetroComponents.RetroProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelRetroComponents.RetroFormFields,
);

const isCuponDataFound = isComponentFound(
  FunnelRetroComponents.RetroCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelRetroComponents.RetroVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelRetroComponents.RetroOrderThroughWhatsapp,
);

const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelRetroComponents.RetroOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelRetroComponents.RetroRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;

const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="retro-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelRetroComponents.RetroHeader) {
        const headerData = isComponentFound(
          FunnelRetroComponents.RetroHeader,
        );
        return headerData.isComponentFound ? (
          <RetroThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelRetroComponents.RetroProductFunnel) {
        return (
          <RetroThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelRetroComponents.RetroCountdown) {
        const countdownData = isComponentFound(
          FunnelRetroComponents.RetroCountdown,
        );
        return countdownData.isComponentFound ? (
          <RetroThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      if (componentName === FunnelRetroComponents.RetroFaq) {
        const faqData = isComponentFound(FunnelRetroComponents.RetroFaq);
        return faqData.isComponentFound ? (
          <RetroFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelRetroComponents.RetroLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <RetroLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelRetroComponents.RetroProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <RetroProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelRetroComponents.RetroButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <RetroButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroGallery) {
        const galleryData = isComponentFound(
          FunnelRetroComponents.RetroGallery,
        );
        return galleryData.isComponentFound ? (
          <RetroGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelRetroComponents.RetroTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <RetroThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelRetroComponents.RetroDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <RetroDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelRetroComponents.RetroProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <RetroProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroReviews) {
        const ReviewsData = isComponentFound(
          FunnelRetroComponents.RetroReviews,
        );
        return ReviewsData.isComponentFound ? (
          <RetroThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroTextBar) {
        const TextBarData = isComponentFound(
          FunnelRetroComponents.RetroTextBar,
        );
        return TextBarData.isComponentFound ? (
          <RetroThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelRetroComponents.RetroImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <RetroImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelRetroComponents.RetroImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <RetroImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroProductUsage) {
        const productUsageData = isComponentFound(
          FunnelRetroComponents.RetroProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <RetroProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.Retro_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelRetroComponents.Retro_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <RetroBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelRetroComponents.RetroFooter) {
        const footerData = isComponentFound(
          FunnelRetroComponents.RetroFooter,
        );
        return footerData.isComponentFound ? (
          <RetroThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 retro-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />
  </button>
  </section>
</main>
<script>
  import "./RetroTheme.config"
</script>
---
// This component is the main entry point for the Elegant theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./ElegantComponent.css";
import ElegantThemeHeader from "./ElegantTheme/Elegant_Header/ElegantThemeHeader.astro";
import ElegantThemeProduct from "./ElegantTheme/ElegantThemeProduct/ElegantThemeProduct.astro";
import ElegantThemeCountDown from "./ElegantTheme/ElegantThemeCountdown/ElegantThemeCountDown.astro";
import ElegantFaq from "./ElegantTheme/Elegant_Faq/ElegantFaq.astro";
import ElegantProductPreviewComponent from "./ElegantTheme/Elegant_ProductPreview/ElegantProductPreviewComponent.astro";
import { getElegantThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelElegantComponents } from "../../../lib/constants/themes";
import ElegantThemeFooter from "./ElegantTheme/ElegantThemeFooter/ElegantThemeFooter.astro";
import ElegantThemeReviews from "./ElegantTheme/Elegant_Theme_Reviews/ElegantThemeReviews.astro";
import ElegantProductUsage from "./ElegantTheme/Elegant_ProductUsage/ElegantProductUsage.astro";
import ElegantDeliveryFeatures from "./ElegantTheme/Elegant_Delivery_Features/ElegantDeliveryFeatures.astro";
import ElegantProductFeatures from "./ElegantTheme/Elegant_Product_Features/ElegantProductFeatures.astro";
import ElegantThemeTodayStatistics from "./ElegantTheme/ElegantThemeTodayStatistics/ElegantThemeTodayStatistics.astro";
import ElegantLogosCarousel from "./ElegantTheme/ElegantLogosCarousel/ElegantLogosCarousel.astro";
import ElegantButtonWithLink from "./ElegantTheme/ElegantButtonWithLink/ElegantButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import ElegantGridImages from "./ElegantTheme/ElegantGridImagesComponent/elegantGridImages.astro";
import ElegantThemeTextBar from "./ElegantTheme/Elegant_Text_Bar/elegantThemeTextBar.astro";
import ElegantImageTextOverlay from "./ElegantTheme/Elegant_Image_Text_Overlay/elegantImageTextOverlay.astro";
import ElegantImageTextBeside from "./ElegantTheme/Elegant_Image_Text_Beside/elegantImageTextBeside.astro";
import ElegantBeforeAfter from "./ElegantTheme/ElegantBefore&AfterImage/elegantBefore&After.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Elegant theme components and data.
const elegantComponentNames: [FunnelElegantComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getElegantThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelElegantComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelElegantComponents,
): ComponentCheckResult {
  const found = elegantComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelElegantComponents.ElegantHeader,
  FunnelElegantComponents.ElegantProductFunnel, // Always render (required)
  FunnelElegantComponents.ElegantProductFeatures,
  FunnelElegantComponents.ElegantProductPreview,
  FunnelElegantComponents.ElegantProductUsage,
  FunnelElegantComponents.ElegantLogosCarousel,
  FunnelElegantComponents.ElegantButtonWithLink,
  FunnelElegantComponents.ElegantTodayStatistics,
  FunnelElegantComponents.ElegantGallery,
  FunnelElegantComponents.Elegant_Before_After,
  FunnelElegantComponents.ElegantReviews,
  FunnelElegantComponents.ElegantTextBar,
  FunnelElegantComponents.ElegantImageTextOverLay,
  FunnelElegantComponents.ElegantImageTextBeside,
  FunnelElegantComponents.ElegantFaq,
  FunnelElegantComponents.ElegantDeliveryFeatures,
  FunnelElegantComponents.ElegantCountdown,
  FunnelElegantComponents.ElegantFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelElegantComponents.ElegantProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelElegantComponents.ElegantFormFields,
);

const isCuponDataFound = isComponentFound(
  FunnelElegantComponents.ElegantCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelElegantComponents.ElegantVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelElegantComponents.ElegantOrderThroughWhatsapp,
);

const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelElegantComponents.ElegantOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelElegantComponents.ElegantRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;

const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="elegant-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelElegantComponents.ElegantHeader) {
        const headerData = isComponentFound(
          FunnelElegantComponents.ElegantHeader,
        );
        return headerData.isComponentFound ? (
          <ElegantThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelElegantComponents.ElegantProductFunnel) {
        return (
          <ElegantThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelElegantComponents.ElegantCountdown) {
        const countdownData = isComponentFound(
          FunnelElegantComponents.ElegantCountdown,
        );
        return countdownData.isComponentFound ? (
          <ElegantThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      if (componentName === FunnelElegantComponents.ElegantFaq) {
        const faqData = isComponentFound(FunnelElegantComponents.ElegantFaq);
        return faqData.isComponentFound ? (
          <ElegantFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelElegantComponents.ElegantLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <ElegantLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelElegantComponents.ElegantProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <ElegantProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelElegantComponents.ElegantButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <ElegantButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantGallery) {
        const galleryData = isComponentFound(
          FunnelElegantComponents.ElegantGallery,
        );
        return galleryData.isComponentFound ? (
          <ElegantGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelElegantComponents.ElegantTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <ElegantThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelElegantComponents.ElegantDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <ElegantDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelElegantComponents.ElegantProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <ElegantProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantReviews) {
        const ReviewsData = isComponentFound(
          FunnelElegantComponents.ElegantReviews,
        );
        return ReviewsData.isComponentFound ? (
          <ElegantThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantTextBar) {
        const TextBarData = isComponentFound(
          FunnelElegantComponents.ElegantTextBar,
        );
        return TextBarData.isComponentFound ? (
          <ElegantThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelElegantComponents.ElegantImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <ElegantImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelElegantComponents.ElegantImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <ElegantImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantProductUsage) {
        const productUsageData = isComponentFound(
          FunnelElegantComponents.ElegantProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <ElegantProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.Elegant_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelElegantComponents.Elegant_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <ElegantBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelElegantComponents.ElegantFooter) {
        const footerData = isComponentFound(
          FunnelElegantComponents.ElegantFooter,
        );
        return footerData.isComponentFound ? (
          <ElegantThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 elegant-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />
  </button>
  </section>
</main>
<script>
  import "./ElegantTheme.config"
</script>
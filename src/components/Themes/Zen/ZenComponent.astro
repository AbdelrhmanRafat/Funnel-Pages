---
// This component is the main entry point for the Zen theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./ZenComponent.css";
import ZenThemeHeader from "./ZenTheme/Zen_Header/ZenThemeHeader.astro";
import ZenThemeProduct from "./ZenTheme/ZenThemeProduct/ZenThemeProduct.astro";
import ZenThemeCountDown from "./ZenTheme/ZenThemeCountdown/ZenThemeCountDown.astro";
import ZenFaq from "./ZenTheme/Zen_Faq/ZenFaq.astro";
import ZenProductPreviewComponent from "./ZenTheme/Zen_ProductPreview/ZenProductPreviewComponent.astro";
import { getZenThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelZenComponents } from "../../../lib/constants/themes";
import ZenThemeFooter from "./ZenTheme/ZenThemeFooter/ZenThemeFooter.astro";
import ZenThemeReviews from "./ZenTheme/Zen_Theme_Reviews/ZenThemeReviews.astro";
import ZenProductUsage from "./ZenTheme/Zen_ProductUsage/ZenProductUsage.astro";
import ZenDeliveryFeatures from "./ZenTheme/Zen_Delivery_Features/ZenDeliveryFeatures.astro";
import ZenProductFeatures from "./ZenTheme/Zen_Product_Features/ZenProductFeatures.astro";
import ZenThemeTodayStatistics from "./ZenTheme/ZenThemeTodayStatistics/ZenThemeTodayStatistics.astro";
import ZenLogosCarousel from "./ZenTheme/ZenLogosCarousel/ZenLogosCarousel.astro";
import ZenButtonWithLink from "./ZenTheme/ZenButtonWithLink/ZenButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import ZenGridImages from "./ZenTheme/ZenGridImagesComponent/zenGridImages.astro";
import ZenThemeTextBar from "./ZenTheme/Zen_Text_Bar/zenThemeTextBar.astro";
import ZenImageTextOverlay from "./ZenTheme/Zen_Image_Text_Overlay/zenImageTextOverlay.astro";
import ZenImageTextBeside from "./ZenTheme/Zen_Image_Text_Beside/zenImageTextBeside.astro";
import ZenBeforeAfter from "./ZenTheme/ZenBefore&AfterImage/zenBefore&After.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Zen theme components and data.
const ZenComponentNames: [FunnelZenComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getZenThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelZenComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelZenComponents,
): ComponentCheckResult {
  const found = ZenComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelZenComponents.ZenHeader,
  FunnelZenComponents.ZenProductFunnel, // Always render (required)
  FunnelZenComponents.ZenProductFeatures,
  FunnelZenComponents.ZenProductPreview,
  FunnelZenComponents.ZenProductUsage,
  FunnelZenComponents.ZenLogosCarousel,
  FunnelZenComponents.ZenButtonWithLink,
  FunnelZenComponents.ZenTodayStatistics,
  FunnelZenComponents.ZenGallery,
  FunnelZenComponents.Zen_Before_After,
  FunnelZenComponents.ZenReviews,
  FunnelZenComponents.ZenTextBar,
  FunnelZenComponents.ZenImageTextOverLay,
  FunnelZenComponents.ZenImageTextBeside,
  FunnelZenComponents.ZenFaq,
  FunnelZenComponents.ZenDeliveryFeatures,
  FunnelZenComponents.ZenCountdown,
  FunnelZenComponents.ZenFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelZenComponents.ZenProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelZenComponents.ZenFormFields,
);


const isCuponDataFound = isComponentFound(
  FunnelZenComponents.ZenCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelZenComponents.ZenVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelZenComponents.ZenOrderThroughWhatsapp,
);


const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelZenComponents.ZenOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelZenComponents.ZenRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;


const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

  const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

  const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;
  

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="Zen-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelZenComponents.ZenHeader) {
        const headerData = isComponentFound(
          FunnelZenComponents.ZenHeader,
        );
        return headerData.isComponentFound ? (
          <ZenThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelZenComponents.ZenProductFunnel) {
        return (
          <ZenThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelZenComponents.ZenCountdown) {
        const countdownData = isComponentFound(
          FunnelZenComponents.ZenCountdown,
        );
        return countdownData.isComponentFound ? (
          <ZenThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      
      if (componentName === FunnelZenComponents.ZenFaq) {
        const faqData = isComponentFound(FunnelZenComponents.ZenFaq);
        return faqData.isComponentFound ? (
          <ZenFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelZenComponents.ZenLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <ZenLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelZenComponents.ZenProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <ZenProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelZenComponents.ZenButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <ZenButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenGallery) {
        const galleryData = isComponentFound(
          FunnelZenComponents.ZenGallery,
        );
        return galleryData.isComponentFound ? (
          <ZenGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelZenComponents.ZenTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <ZenThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelZenComponents.ZenDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <ZenDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelZenComponents.ZenProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <ZenProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenReviews) {
        const ReviewsData = isComponentFound(
          FunnelZenComponents.ZenReviews,
        );
        return ReviewsData.isComponentFound ? (
          <ZenThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenTextBar) {
        const TextBarData = isComponentFound(
          FunnelZenComponents.ZenTextBar,
        );
        return TextBarData.isComponentFound ? (
          <ZenThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelZenComponents.ZenImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <ZenImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelZenComponents.ZenImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <ZenImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenProductUsage) {
        const productUsageData = isComponentFound(
          FunnelZenComponents.ZenProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <ZenProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.Zen_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelZenComponents.Zen_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <ZenBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelZenComponents.ZenFooter) {
        const footerData = isComponentFound(
          FunnelZenComponents.ZenFooter,
        );
        return footerData.isComponentFound ? (
          <ZenThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 Zen-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />

  </button>
  </section>
</main>
<script>
  import "./ZenTheme.config"
</script>
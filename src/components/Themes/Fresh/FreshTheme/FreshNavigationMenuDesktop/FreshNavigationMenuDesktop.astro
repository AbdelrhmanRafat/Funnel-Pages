---
import "./FreshNavigationMenuDesktop.css";
import type { Data } from "../../../../../lib/api/types";
import { FunnelFreshComponents } from "../../../../../lib/constants/themes";
import { getFreshThemeComponent } from "../../../../../lib/utils/ThemeSelect";
import type { Language } from "../../../../../lib/utils/i18n/translations";
import LucideIcon from "../../../../Shared/LucideIcon.astro";

const funnelPage: Data = Astro.props.funnelPage;

// Generate anchors from available components with comprehensive null checking
const availableAnchors = funnelPage?.blocks
  ?.map((block) => {
    // Check if block exists and has required properties
    if (!block || !block.key || !block.data) {
      return null;
    }

    const component = getFreshThemeComponent(block.key);
    
    // Check if component exists and has title from API
    if (component) {
      return {
        component: component,
        componentData: block.data
      };
    }
    return null;
  })
  ?.filter((anchor): anchor is NonNullable<typeof anchor> => anchor !== null) || [];

// Get initial language from cookie during SSR
const currentLang: Language = (Astro.cookies.get("lang")?.value || "en") as Language;
const isArabic = currentLang === "ar";

// Order anchors based on render order
const RENDER_ORDER = [
  FunnelFreshComponents.FreshProductFunnel, // Always render (required)
  FunnelFreshComponents.FreshProductFeatures,
  FunnelFreshComponents.FreshProductPreview,
  FunnelFreshComponents.FreshProductUsage,
  FunnelFreshComponents.freshTodayStatistics,
  FunnelFreshComponents.FreshGallery,
  FunnelFreshComponents.Classic_Before_After,
  FunnelFreshComponents.FreshReviews,
  FunnelFreshComponents.FreshTextBar,
  FunnelFreshComponents.FreshImageTextOverLay,
  FunnelFreshComponents.FreshImageTextBeside,
  FunnelFreshComponents.FreshFaq,
  FunnelFreshComponents.FreshDeliveryFeatures,
  FunnelFreshComponents.FreshCountdown,
  FunnelFreshComponents.FreshFooter,
];


 // Safe filtering with additional null checks
const orderedAnchors = RENDER_ORDER
  .map(component => {
    const foundAnchor = availableAnchors.find(anchor => 
      anchor && anchor.component === component
    );
    return foundAnchor || null;
  })
  .filter((anchor): anchor is NonNullable<typeof anchor> => {
    // Ensure anchor exists and has required properties
    return (
      anchor !== null &&
      !!anchor.component &&
      !!anchor.componentData &&
      // Check for language-specific titles instead of generic 'title'
      (
        (!!anchor.componentData.title_en && anchor.componentData.title_en.trim() !== '') ||
        (!!anchor.componentData.title_ar && anchor.componentData.title_ar.trim() !== '')
      )
    );
  });
---

<!-- Enhanced Desktop Navigation with Optimized Overflow -->
{orderedAnchors && orderedAnchors.length > 0 && (
  <desktop-navigation 
    class="fresh-desktop-nav hidden md:block w-full mt-4 pt-4"
    data-navigation-items={JSON.stringify(orderedAnchors.map(anchor => ({
      id: anchor.component,
      title: isArabic ? anchor.componentData.title_ar : anchor.componentData.title_en})))}
    data-max-visible-items="6"
    data-overflow-threshold="800"
  >
    <nav class="flex items-center justify-center">
      <div class="relative flex items-center">
        <!-- Main Navigation Container -->
        <div 
          class="nav-container flex items-center overflow-hidden transition-all duration-300" 
          data-nav-container
        >
          <ul class="flex items-center gap-2 transition-all duration-300" data-nav-list>
            {orderedAnchors.map((anchor, index) => {
              // Additional safety check during rendering
              if (!anchor || !anchor.component) {
                return null;
              }
              
              return (
                <li 
                  class="fresh-nav-item flex-shrink-0 transition-all duration-300"
                  data-nav-index={index}
                  data-nav-item
                >
                  <a 
                    href={`#${anchor.component}`}
                    class="fresh-desktop-nav-link block px-4 py-2 text-sm font-medium rounded-full transition-all duration-300 hover:scale-105 whitespace-nowrap"
                    data-anchor-target={anchor.componentData.title}
                    data-scroll-target={anchor.component}
                  >
                    {isArabic ?   anchor.componentData.title_ar : anchor.componentData.title_en}
                  </a>
                </li>
              );
            })}
          </ul>
        </div>

        <!-- Overflow Indicator Dots -->
        <div 
          class="fresh-nav-dots hidden items-center gap-1 mx-3 transition-opacity duration-300" 
          data-nav-dots
        >
          <div class="w-1.5 h-1.5 rounded-full bg-current opacity-60"></div>
          <div class="w-1.5 h-1.5 rounded-full bg-current opacity-80"></div>
          <div class="w-1.5 h-1.5 rounded-full bg-current opacity-60"></div>
        </div>

        <!-- Overflow Dropdown -->
        <div class="fresh-nav-overflow relative hidden" data-nav-overflow>
          <button 
            class="fresh-overflow-toggle px-4 py-2 text-sm font-medium rounded-full transition-all duration-300 hover:scale-105 flex items-center gap-2"
            data-overflow-toggle
            aria-label="More navigation items"
            type="button"
          >
            <span class="text-sm" data-translate="Headers.more">More</span>
             <LucideIcon name="ChevronDown" width="18" height="18" class="text-xs transition-transform duration-200" data-dropdown-arrow />

          </button>
          
          <!-- Dropdown Menu -->
          <div 
            class="fresh-overflow-dropdown absolute top-full left-1/2 transform -translate-x-1/2 mt-2 py-2 rounded-lg border min-w-48 z-20 hidden"
            data-overflow-dropdown
          >
            <ul class="overflow-items space-y-1" data-overflow-items>
              <!-- Hidden items will be populated here by the web component -->
            </ul>
          </div>
        </div>
      </div>
    </nav>
  </desktop-navigation>
)}

<script>
  import "./FreshNavigationMenuDesktop";
</script>
---
import "./FreshNavigationMenuMobile.css"
import type { Data } from "../../../../../lib/api/types";
import { FunnelFreshComponents } from "../../../../../lib/constants/themes";
import { getFreshThemeComponent } from "../../../../../lib/utils/ThemeSelect";
import type { Language } from "../../../../../lib/utils/i18n/translations";
import LucideIcon from "../../../../Shared/LucideIcon.astro";

const funnelPage: Data = Astro.props.funnelPage;
const logo: string = Astro.props.logo;
const title: string = Astro.props.title;

// Generate anchors from available components with comprehensive null checking
const availableAnchors = funnelPage?.blocks
  ?.map((block) => {
    // Check if block exists and has required properties
    if (!block || !block.name || !block.data) {
      return null;
    }

    const component = getFreshThemeComponent(block.name);
    
    // Check if component exists and has title from API
    if (component) {
      return {
        component: component,
        componentData: block.data
      };
    }
    return null;
  })
  ?.filter((anchor): anchor is NonNullable<typeof anchor> => anchor !== null) || [];

// Define render order - WITHOUT header (as originally requested)
const RENDER_ORDER = [
  FunnelFreshComponents.FreshProductFunnel, // Always render (required)
  FunnelFreshComponents.FreshProductFeatures,
  FunnelFreshComponents.FreshProductPreview,
  FunnelFreshComponents.FreshProductUsage,
  FunnelFreshComponents.freshLogosCarousel,
  FunnelFreshComponents.FreshButtonWithLink,
  FunnelFreshComponents.freshTodayStatistics,
  FunnelFreshComponents.FreshGallery,
  FunnelFreshComponents.Classic_Before_After,
  FunnelFreshComponents.FreshReviews,
  FunnelFreshComponents.FreshTextBar,
  FunnelFreshComponents.FreshImageTextOverLay,
  FunnelFreshComponents.FreshImageTextBeside,
  FunnelFreshComponents.FreshFaq,
  FunnelFreshComponents.FreshDeliveryFeatures,
  FunnelFreshComponents.FreshCountdown,
  FunnelFreshComponents.FreshFooter,
];

// Get initial language from cookie during SSR
const currentLang: Language = (Astro.cookies.get("lang")?.value || "en") as Language;
const isArabic = currentLang === "ar";
// Safe filtering with additional null checks
const orderedAnchors = RENDER_ORDER
  .map(component => {
    const foundAnchor = availableAnchors.find(anchor => 
      anchor && anchor.component === component
    );
    return foundAnchor || null;
  })
  .filter((anchor): anchor is NonNullable<typeof anchor> => {
    // Ensure anchor exists and has required properties
    return (
      anchor !== null &&
      !!anchor.component &&
      !!anchor.componentData &&
      // Check for language-specific titles instead of generic 'title'
      (
        (!!anchor.componentData.title_en && anchor.componentData.title_en.trim() !== '') ||
        (!!anchor.componentData.title_ar && anchor.componentData.title_ar.trim() !== '')
      )
    );
  });
---

<!-- Mobile Navigation Menu Overlay - Only visible on mobile -->
<div 
  id="header-menu-overlay" 
  class="fresh-menu-overlay fixed top-0 left-0 w-full h-full z-60"
>
  <!-- Backdrop for closing menu -->
  <div 
    class="fresh-menu-backdrop absolute top-0 left-0 w-full h-full" 
    id="header-menu-backdrop"
  ></div>
  
  <!-- Menu Content -->
  <div class="fresh-menu-content absolute top-0 right-0 h-full w-80 max-w-[85vw] p-6 overflow-y-auto">
    <!-- Menu Header -->
    <div class="fresh-menu-header flex justify-between items-center mb-8 pb-4">
      <div class="w-32">
        <img src={logo} alt={title || "Logo"} class="w-full" />
      </div>
      <button
        id="header-menu-close"
        class="fresh-menu-close p-2 rounded-lg w-10 h-10 flex items-center justify-center transition-all duration-300"
        aria-label="Close menu"
        type="button"
      >
     <LucideIcon name="SquareX" width="18" height="18" />

      </button>
    </div>
    
    <!-- Menu Items with API Titles -->
    <nav class="fresh-menu-nav flex-1" role="navigation" aria-label="Main navigation">
      <ul class="fresh-menu-list space-y-2" role="list">
        <!-- Auto-generated navigation items -->
        {orderedAnchors.map((anchor, index) => {
          // Additional safety check during rendering
          if (!anchor || !anchor.component) {
            return null;
          }
          
          return (
            <li 
              class="fresh-menu-item transition-all duration-300 ease-out"
              role="listitem"
              style={`--menu-item-index: ${index + 1}`}
            >
              <a
                href={`#${anchor.component}`}
                class="fresh-menu-link block p-3 rounded-lg text-sm font-medium transition-all duration-300"
                data-anchor-target={anchor.componentData.title}
              >
                    {isArabic ?   anchor.componentData.title_ar : anchor.componentData.title_en}
                  </a>
            </li>
          );
        })}
      </ul>
    </nav>
  </div>
</div>
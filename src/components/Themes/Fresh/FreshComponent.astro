---
// This component is the main entry point for the Fresh theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./FreshComponent.css";
import FreshThemeHeader from "./FreshTheme/Fresh_Header/FreshThemeHeader.astro";
import FreshThemeProduct from "./FreshTheme/FreshThemeProduct/FreshThemeProduct.astro";
import FreshThemeCountDown from "./FreshTheme/FreshThemeCountdown/FreshThemeCountDown.astro";
import FreshFaq from "./FreshTheme/Fresh_Faq/FreshFaq.astro";
import FreshProductPreviewComponent from "./FreshTheme/Fresh_ProductPreview/FreshProductPreviewComponent.astro";
import { getFreshThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelFreshComponents } from "../../../lib/constants/themes";
import FreshThemeFooter from "./FreshTheme/FreshThemeFooter/FreshThemeFooter.astro";
import FreshThemeReviews from "./FreshTheme/Fresh_Theme_Reviews/FreshThemeReviews.astro";
import FreshProductUsage from "./FreshTheme/Fresh_ProductUsage/FreshProductUsage.astro";
import FreshDeliveryFeatures from "./FreshTheme/Fresh_Delivery_Features/FreshDeliveryFeatures.astro";
import FreshProductFeatures from "./FreshTheme/Fresh_Product_Features/FreshProductFeatures.astro";
import FreshThemeTodayStatistics from "./FreshTheme/FreshThemeTodayStatistics/FreshThemeTodayStatistics.astro";
import FreshLogosCarousel from "./FreshTheme/FreshLogosCarousel/FreshLogosCarousel.astro";
import FreshButtonWithLink from "./FreshTheme/FreshButtonWithLink/FreshButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import FreshGridImages from "./FreshTheme/FreshGridImagesComponent/freshGridImages.astro";
import FreshThemeTextBar from "./FreshTheme/Fresh_Text_Bar/freshThemeTextBar.astro";
import FreshImageTextOverlay from "./FreshTheme/Fresh_Image_Text_Overlay/freshImageTextOverlay.astro";
import FreshImageTextBeside from "./FreshTheme/Fresh_Image_Text_Beside/freshImageTextBeside.astro";
import FreshBeforeAfter from "./FreshTheme/FreshBefore&AfterImage/freshBefore&After.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Fresh theme components and data.
const freshComponentNames: [FunnelFreshComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getFreshThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelFreshComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelFreshComponents,
): ComponentCheckResult {
  const found = freshComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelFreshComponents.FreshHeader,
  FunnelFreshComponents.FreshProductFunnel, // Always render (required)
  FunnelFreshComponents.FreshProductFeatures,
  FunnelFreshComponents.FreshProductPreview,
  FunnelFreshComponents.FreshProductUsage,
  FunnelFreshComponents.FreshLogosCarousel,
  FunnelFreshComponents.FreshButtonWithLink,
  FunnelFreshComponents.FreshTodayStatistics,
  FunnelFreshComponents.FreshGallery,
  FunnelFreshComponents.Fresh_Before_After,
  FunnelFreshComponents.FreshReviews,
  FunnelFreshComponents.FreshTextBar,
  FunnelFreshComponents.FreshImageTextOverLay,
  FunnelFreshComponents.FreshImageTextBeside,
  FunnelFreshComponents.FreshFaq,
  FunnelFreshComponents.FreshDeliveryFeatures,
  FunnelFreshComponents.FreshCountdown,
  FunnelFreshComponents.FreshFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelFreshComponents.FreshProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelFreshComponents.FreshFormFields,
);

const isCuponDataFound = isComponentFound(
  FunnelFreshComponents.FreshCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelFreshComponents.FreshVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelFreshComponents.FreshOrderThroughWhatsapp,
);

const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelFreshComponents.FreshOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelFreshComponents.FreshRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;

const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="fresh-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelFreshComponents.FreshHeader) {
        const headerData = isComponentFound(
          FunnelFreshComponents.FreshHeader,
        );
        return headerData.isComponentFound ? (
          <FreshThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelFreshComponents.FreshProductFunnel) {
        return (
          <FreshThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelFreshComponents.FreshCountdown) {
        const countdownData = isComponentFound(
          FunnelFreshComponents.FreshCountdown,
        );
        return countdownData.isComponentFound ? (
          <FreshThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      if (componentName === FunnelFreshComponents.FreshFaq) {
        const faqData = isComponentFound(FunnelFreshComponents.FreshFaq);
        return faqData.isComponentFound ? (
          <FreshFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelFreshComponents.FreshLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <FreshLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelFreshComponents.FreshProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <FreshProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelFreshComponents.FreshButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <FreshButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshGallery) {
        const galleryData = isComponentFound(
          FunnelFreshComponents.FreshGallery,
        );
        return galleryData.isComponentFound ? (
          <FreshGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelFreshComponents.FreshTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <FreshThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelFreshComponents.FreshDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <FreshDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelFreshComponents.FreshProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <FreshProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshReviews) {
        const ReviewsData = isComponentFound(
          FunnelFreshComponents.FreshReviews,
        );
        return ReviewsData.isComponentFound ? (
          <FreshThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshTextBar) {
        const TextBarData = isComponentFound(
          FunnelFreshComponents.FreshTextBar,
        );
        return TextBarData.isComponentFound ? (
          <FreshThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelFreshComponents.FreshImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <FreshImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelFreshComponents.FreshImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <FreshImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshProductUsage) {
        const productUsageData = isComponentFound(
          FunnelFreshComponents.FreshProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <FreshProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.Fresh_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelFreshComponents.Fresh_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <FreshBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelFreshComponents.FreshFooter) {
        const footerData = isComponentFound(
          FunnelFreshComponents.FreshFooter,
        );
        return footerData.isComponentFound ? (
          <FreshThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 fresh-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />
  </button>
  </section>
</main>
<script>
  import "./FreshTheme.config"
</script>
---
// This component is the main entry point for the Urban theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./UrbanComponent.css";
import UrbanThemeHeader from "./UrbanTheme/Urban_Header/UrbanThemeHeader.astro";
import UrbanThemeProduct from "./UrbanTheme/UrbanThemeProduct/UrbanThemeProduct.astro";
import UrbanThemeCountDown from "./UrbanTheme/UrbanThemeCountdown/UrbanThemeCountDown.astro";
import UrbanFaq from "./UrbanTheme/Urban_Faq/UrbanFaq.astro";
import UrbanProductPreviewComponent from "./UrbanTheme/Urban_ProductPreview/UrbanProductPreviewComponent.astro";
import { getUrbanThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelUrbanComponents } from "../../../lib/constants/themes";
import UrbanThemeFooter from "./UrbanTheme/UrbanThemeFooter/UrbanThemeFooter.astro";
import UrbanThemeReviews from "./UrbanTheme/Urban_Theme_Reviews/UrbanThemeReviews.astro";
import UrbanProductUsage from "./UrbanTheme/Urban_ProductUsage/UrbanProductUsage.astro";
import UrbanDeliveryFeatures from "./UrbanTheme/Urban_Delivery_Features/UrbanDeliveryFeatures.astro";
import UrbanProductFeatures from "./UrbanTheme/Urban_Product_Features/UrbanProductFeatures.astro";
import UrbanThemeTodayStatistics from "./UrbanTheme/UrbanThemeTodayStatistics/UrbanThemeTodayStatistics.astro";
import UrbanLogosCarousel from "./UrbanTheme/UrbanLogosCarousel/UrbanLogosCarousel.astro";
import UrbanButtonWithLink from "./UrbanTheme/UrbanButtonWithLink/UrbanButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import UrbanGridImages from "./UrbanTheme/UrbanGridImagesComponent/urbanGridImages.astro";
import UrbanThemeTextBar from "./UrbanTheme/Urban_Text_Bar/urbanThemeTextBar.astro";
import UrbanImageTextOverlay from "./UrbanTheme/Urban_Image_Text_Overlay/urbanImageTextOverlay.astro";
import UrbanImageTextBeside from "./UrbanTheme/Urban_Image_Text_Beside/urbanImageTextBeside.astro";
import UrbanBeforeAfter from "./UrbanTheme/UrbanBefore&AfterImage/urbanBefore&After.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Urban theme components and data.
const UrbanComponentNames: [FunnelUrbanComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getUrbanThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelUrbanComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelUrbanComponents,
): ComponentCheckResult {
  const found = UrbanComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelUrbanComponents.UrbanHeader,
  FunnelUrbanComponents.UrbanProductFunnel, // Always render (required)
  FunnelUrbanComponents.UrbanProductFeatures,
  FunnelUrbanComponents.UrbanProductPreview,
  FunnelUrbanComponents.UrbanProductUsage,
  FunnelUrbanComponents.UrbanLogosCarousel,
  FunnelUrbanComponents.UrbanButtonWithLink,
  FunnelUrbanComponents.UrbanTodayStatistics,
  FunnelUrbanComponents.UrbanGallery,
  FunnelUrbanComponents.Urban_Before_After,
  FunnelUrbanComponents.UrbanReviews,
  FunnelUrbanComponents.UrbanTextBar,
  FunnelUrbanComponents.UrbanImageTextOverLay,
  FunnelUrbanComponents.UrbanImageTextBeside,
  FunnelUrbanComponents.UrbanFaq,
  FunnelUrbanComponents.UrbanDeliveryFeatures,
  FunnelUrbanComponents.UrbanCountdown,
  FunnelUrbanComponents.UrbanFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelUrbanComponents.UrbanProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelUrbanComponents.UrbanFormFields,
);


const isCuponDataFound = isComponentFound(
  FunnelUrbanComponents.UrbanCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelUrbanComponents.UrbanVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelUrbanComponents.UrbanOrderThroughWhatsapp,
);


const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelUrbanComponents.UrbanOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelUrbanComponents.UrbanRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;


const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

  const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

  const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;
  

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="Urban-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelUrbanComponents.UrbanHeader) {
        const headerData = isComponentFound(
          FunnelUrbanComponents.UrbanHeader,
        );
        return headerData.isComponentFound ? (
          <UrbanThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelUrbanComponents.UrbanProductFunnel) {
        return (
          <UrbanThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelUrbanComponents.UrbanCountdown) {
        const countdownData = isComponentFound(
          FunnelUrbanComponents.UrbanCountdown,
        );
        return countdownData.isComponentFound ? (
          <UrbanThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      
      if (componentName === FunnelUrbanComponents.UrbanFaq) {
        const faqData = isComponentFound(FunnelUrbanComponents.UrbanFaq);
        return faqData.isComponentFound ? (
          <UrbanFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelUrbanComponents.UrbanLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <UrbanLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelUrbanComponents.UrbanProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <UrbanProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelUrbanComponents.UrbanButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <UrbanButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanGallery) {
        const galleryData = isComponentFound(
          FunnelUrbanComponents.UrbanGallery,
        );
        return galleryData.isComponentFound ? (
          <UrbanGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelUrbanComponents.UrbanTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <UrbanThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelUrbanComponents.UrbanDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <UrbanDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelUrbanComponents.UrbanProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <UrbanProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanReviews) {
        const ReviewsData = isComponentFound(
          FunnelUrbanComponents.UrbanReviews,
        );
        return ReviewsData.isComponentFound ? (
          <UrbanThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanTextBar) {
        const TextBarData = isComponentFound(
          FunnelUrbanComponents.UrbanTextBar,
        );
        return TextBarData.isComponentFound ? (
          <UrbanThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelUrbanComponents.UrbanImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <UrbanImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelUrbanComponents.UrbanImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <UrbanImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanProductUsage) {
        const productUsageData = isComponentFound(
          FunnelUrbanComponents.UrbanProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <UrbanProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.Urban_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelUrbanComponents.Urban_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <UrbanBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelUrbanComponents.UrbanFooter) {
        const footerData = isComponentFound(
          FunnelUrbanComponents.UrbanFooter,
        );
        return footerData.isComponentFound ? (
          <UrbanThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 Urban-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />

  </button>
  </section>
</main>
<script>
  import "./UrbanTheme.config"
</script>
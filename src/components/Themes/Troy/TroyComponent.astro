---
// This component is the main entry point for the troy theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./troyComponent.css";
import troyThemeHeader from "./troyTheme/troy_Header/troyThemeHeader.astro";
import troyThemeProduct from "./troyTheme/troyThemeProduct/troyThemeProduct.astro";
import troyThemeCountDown from "./troyTheme/troyThemeCountdown/troyThemeCountDown.astro";
import troyFaq from "./troyTheme/troy_Faq/troyFaq.astro";
import troyProductPreviewComponent from "./troyTheme/troy_ProductPreview/troyProductPreviewComponent.astro";
import { gettroyThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunneltroyComponents } from "../../../lib/constants/themes";
import troyThemeFooter from "./troyTheme/troyThemeFooter/troyThemeFooter.astro";
import troyThemeReviews from "./troyTheme/troy_Theme_Reviews/troyThemeReviews.astro";
import troyProductUsage from "./troyTheme/troy_ProductUsage/troyProductUsage.astro";
import troyDeliveryFeatures from "./troyTheme/troy_Delivery_Features/troyDeliveryFeatures.astro";
import troyProductFeatures from "./troyTheme/troy_Product_Features/troyProductFeatures.astro";
import troyThemeTextBar from "./troyTheme/troy_Text_Bar/troyThemeTextBar.astro";
import troyThemeTodayOrders from "./troyTheme/troyThemeTodayOrders/troyThemeTodayOrders.astro";
import troyBeforeAfter from "./troyTheme/troyBefore&AfterImage/troyBefore&After.astro";
import troyImageTextOverlay from "./troyTheme/troy_Image_Text_Overlay/troyImageTextOverlay.astro";
import troyImageTextBeside from "./troyTheme/troy_Image_Text_Beside/troyImageTextBeside.astro";

interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding troy theme components and data.
const troyComponentNames: [FunneltroyComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = gettroyThemeComponent(block.name);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunneltroyComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunneltroyComponents,
): ComponentCheckResult {
  const found = troyComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunneltroyComponents.troyHeader,
  FunneltroyComponents.troyProductFunnel, // Always render (required)
  FunneltroyComponents.troyProductFeatures,
  FunneltroyComponents.troyProductPreview,
  FunneltroyComponents.troyProductUsage,
  FunneltroyComponents.troyTodayOrders,
  FunneltroyComponents.troy_Before_After,
  FunneltroyComponents.troyReviews,
  FunneltroyComponents.troyTextBar,
  FunneltroyComponents.troyImageTextOverLay,
  FunneltroyComponents.troyImageTextBeside,
  FunneltroyComponents.troyFaq,
  FunneltroyComponents.troyDeliveryFeatures,
  FunneltroyComponents.troyCountdown,
  FunneltroyComponents.troyFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunneltroyComponents.troyProductFunnel,
);
const isFormFieldsDataFound = isComponentFound(
  FunneltroyComponents.troyFormFields,
);

const isOrderConfirmationNoticeFound = isComponentFound(
  FunneltroyComponents.troyOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunneltroyComponents.troyRates);
const isGalleryFound = isComponentFound(FunneltroyComponents.troyGallery);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;
const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;
const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const galleryData = isGalleryFound.isComponentFound
  ? isGalleryFound.componentData
  : undefined;

---

<main class="troy-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunneltroyComponents.troyHeader) {
        const headerData = isComponentFound(
          FunneltroyComponents.troyHeader,
        );
        return headerData.isComponentFound ? (
          <troyThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunneltroyComponents.troyProductFunnel) {
        return (
          <troyThemeProduct
            galleryData={galleryData}
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            product={funnelPage.product}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunneltroyComponents.troyCountdown) {
        const countdownData = isComponentFound(
          FunneltroyComponents.troyCountdown,
        );
        return countdownData.isComponentFound ? (
          <troyThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyFaq) {
        const faqData = isComponentFound(FunneltroyComponents.troyFaq);
        return faqData.isComponentFound ? (
          <troyFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyProductPreview) {
        const productPreviewData = isComponentFound(
          FunneltroyComponents.troyProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <troyProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyTodayOrders) {
        const todayOrdersData = isComponentFound(
          FunneltroyComponents.troyTodayOrders,
        );
        return todayOrdersData.isComponentFound ? (
          <troyThemeTodayOrders
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunneltroyComponents.troyDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <troyDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunneltroyComponents.troyProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <troyProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyReviews) {
        const ReviewsData = isComponentFound(
          FunneltroyComponents.troyReviews,
        );
        return ReviewsData.isComponentFound ? (
          <troyThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyTextBar) {
        const TextBarData = isComponentFound(
          FunneltroyComponents.troyTextBar,
        );
        return TextBarData.isComponentFound ? (
          <troyThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunneltroyComponents.troyImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <troyImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunneltroyComponents.troyImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <troyImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyProductUsage) {
        const productUsageData = isComponentFound(
          FunneltroyComponents.troyProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <troyProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troy_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunneltroyComponents.troy_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <troyBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunneltroyComponents.troyFooter) {
        const footerData = isComponentFound(
          FunneltroyComponents.troyFooter,
        );
        return footerData.isComponentFound ? (
          <troyThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 troy-scrollToTopBtn">
   <i class="fa-solid fa-up-long"></i>
  </button>
  </section>
</main>
<script>
  import "./troyTheme.config"
</script>
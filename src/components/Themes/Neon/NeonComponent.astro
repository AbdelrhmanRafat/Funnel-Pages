---
// This component is the main entry point for the Neon theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./NeonComponent.css";
import NeonThemeHeader from "./NeonTheme/Neon_Header/NeonThemeHeader.astro";
import NeonThemeProduct from "./NeonTheme/NeonThemeProduct/NeonThemeProduct.astro";
import NeonThemeCountDown from "./NeonTheme/NeonThemeCountdown/NeonThemeCountDown.astro";
import NeonFaq from "./NeonTheme/Neon_Faq/NeonFaq.astro";
import NeonProductPreviewComponent from "./NeonTheme/Neon_ProductPreview/NeonProductPreviewComponent.astro";
import { getNeonThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelNeonComponents } from "../../../lib/constants/themes";
import NeonThemeFooter from "./NeonTheme/NeonThemeFooter/NeonThemeFooter.astro";
import NeonThemeReviews from "./NeonTheme/Neon_Theme_Reviews/NeonThemeReviews.astro";
import NeonProductUsage from "./NeonTheme/Neon_ProductUsage/NeonProductUsage.astro";
import NeonDeliveryFeatures from "./NeonTheme/Neon_Delivery_Features/NeonDeliveryFeatures.astro";
import NeonProductFeatures from "./NeonTheme/Neon_Product_Features/NeonProductFeatures.astro";
import NeonThemeTodayStatistics from "./NeonTheme/NeonThemeTodayStatistics/NeonThemeTodayStatistics.astro";
import NeonLogosCarousel from "./NeonTheme/NeonLogosCarousel/NeonLogosCarousel.astro";
import NeonButtonWithLink from "./NeonTheme/NeonButtonWithLink/NeonButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import NeonGridImages from "./NeonTheme/NeonGridImagesComponent/neonGridImages.astro";
import NeonThemeTextBar from "./NeonTheme/Neon_Text_Bar/neonThemeTextBar.astro";
import NeonImageTextOverlay from "./NeonTheme/Neon_Image_Text_Overlay/neonImageTextOverlay.astro";
import NeonImageTextBeside from "./NeonTheme/Neon_Image_Text_Beside/neonImageTextBeside.astro";
import NeonBeforeAfter from "./NeonTheme/NeonBefore&AfterImage/neonBefore&After.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Neon theme components and data.
const neonComponentNames: [FunnelNeonComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getNeonThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelNeonComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelNeonComponents,
): ComponentCheckResult {
  const found = neonComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelNeonComponents.NeonHeader,
  FunnelNeonComponents.NeonCountdown,
  FunnelNeonComponents.NeonProductFunnel,
  FunnelNeonComponents.NeonGallery,
  FunnelNeonComponents.NeonTextBar,
  FunnelNeonComponents.NeonProductUsage,
  FunnelNeonComponents.NeonImageTextOverLay,
  FunnelNeonComponents.NeonReviews,
  FunnelNeonComponents.NeonTodayStatistics,
  FunnelNeonComponents.NeonDeliveryFeatures,
  FunnelNeonComponents.NeonProductFeatures,
  FunnelNeonComponents.NeonFaq,
  FunnelNeonComponents.NeonImageTextBeside,
  FunnelNeonComponents.NeonButtonWithLink,
  FunnelNeonComponents.NeonLogosCarousel,
  FunnelNeonComponents.NeonProductPreview,
  FunnelNeonComponents.Neon_Before_After,
  FunnelNeonComponents.NeonFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelNeonComponents.NeonProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelNeonComponents.NeonFormFields,
);

const isCuponDataFound = isComponentFound(
  FunnelNeonComponents.NeonCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelNeonComponents.NeonVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelNeonComponents.NeonOrderThroughWhatsapp,
);

const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelNeonComponents.NeonOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelNeonComponents.NeonRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;

const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="neon-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelNeonComponents.NeonHeader) {
        const headerData = isComponentFound(
          FunnelNeonComponents.NeonHeader,
        );
        return headerData.isComponentFound ? (
          <NeonThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelNeonComponents.NeonProductFunnel) {
        return (
          <NeonThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelNeonComponents.NeonCountdown) {
        const countdownData = isComponentFound(
          FunnelNeonComponents.NeonCountdown,
        );
        return countdownData.isComponentFound ? (
          <NeonThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      if (componentName === FunnelNeonComponents.NeonFaq) {
        const faqData = isComponentFound(FunnelNeonComponents.NeonFaq);
        return faqData.isComponentFound ? (
          <NeonFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelNeonComponents.NeonLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <NeonLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelNeonComponents.NeonProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <NeonProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelNeonComponents.NeonButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <NeonButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonGallery) {
        const galleryData = isComponentFound(
          FunnelNeonComponents.NeonGallery,
        );
        return galleryData.isComponentFound ? (
          <NeonGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelNeonComponents.NeonTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <NeonThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelNeonComponents.NeonDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <NeonDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelNeonComponents.NeonProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <NeonProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonReviews) {
        const ReviewsData = isComponentFound(
          FunnelNeonComponents.NeonReviews,
        );
        return ReviewsData.isComponentFound ? (
          <NeonThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonTextBar) {
        const TextBarData = isComponentFound(
          FunnelNeonComponents.NeonTextBar,
        );
        return TextBarData.isComponentFound ? (
          <NeonThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelNeonComponents.NeonImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <NeonImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelNeonComponents.NeonImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <NeonImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonProductUsage) {
        const productUsageData = isComponentFound(
          FunnelNeonComponents.NeonProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <NeonProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.Neon_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelNeonComponents.Neon_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <NeonBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelNeonComponents.NeonFooter) {
        const footerData = isComponentFound(
          FunnelNeonComponents.NeonFooter,
        );
        return footerData.isComponentFound ? (
          <NeonThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 neon-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />
  </button>
  </section>
</main>
<script>
  import "./NeonTheme.config"
</script>
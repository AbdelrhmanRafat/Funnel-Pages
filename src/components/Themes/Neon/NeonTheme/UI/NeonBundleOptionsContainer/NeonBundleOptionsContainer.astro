---
import "./NeonBundleOptionsContainer.css";
import type { CustomOptions, Product } from "../../../../../../lib/api/types";
import { detectColorOption } from "../../../../../../lib/utils/Custom-Options-utils";

const product: Product = Astro.props.product;
const panelIndex: number = Astro.props["panel-index"] || 1;
const isHaveVariant = product.is_have_variant;
const customOptions: CustomOptions = product.custom_options;
const nOfOptions: number = Object.keys(customOptions).length;
// Component configuration
const allowMultipleSelection = Astro.props.allowMultipleSelection ?? false;
const showSelectionIndicators = true;
const enableAutoSelect = Astro.props.enableAutoSelect ?? false;

// ðŸ†• Clean data extraction
let optionData: any = null;
const skuNoVariant = product.sku_code;

if (isHaveVariant === "true" && customOptions) {
  // Extract options in original JSON order
  const optionEntries = Object.entries(customOptions);

  const firstOption = optionEntries[0]
    ? {
        key: optionEntries[0][0],
        title: optionEntries[0][0],
        values: optionEntries[0][1],
      }
    : null;

  const secondOption = optionEntries[1]
    ? {
        key: optionEntries[1][0],
        title: optionEntries[1][0],
        values: optionEntries[1][1],
      }
    : null;

  const colorDetection = detectColorOption(firstOption, secondOption);

  // ðŸ†• Build associations for filtering (first â†’ second only)
  const associations: any = {};
  if (firstOption && secondOption) {
    firstOption.values.forEach((firstValue : any) => {
      const availableSecondOptions =
        firstValue.available_options?.[secondOption.key];
      if (availableSecondOptions && Array.isArray(availableSecondOptions)) {
        associations[firstValue.value] = availableSecondOptions.map((item) => ({
          value: item.value,
          sku_id: item.sku_id,
          hex: item.hex,
        }));
      }
    });
  }

  // ðŸ†• Create clean data structure
  optionData = {
    firstOption: firstOption
      ? {
          ...firstOption,
          hasColors: colorDetection.firstHasColors,
        }
      : null,
    secondOption: secondOption
      ? {
          ...secondOption,
          hasColors: colorDetection.secondHasColors,
        }
      : null,
    associations, // firstOption.value â†’ secondOption items with sku_id
  };
}
---

<div id="neon-bundle-options-container" class="neon-bundle-options-container">
  <neon-select-options-bundles
    data-options-panel-index={panelIndex}
    data-options-allow-multiple={allowMultipleSelection}
    data-options-show-indicators={showSelectionIndicators}
    data-options-auto-select={enableAutoSelect}
    data-options-is-variant={isHaveVariant}
    data-option-data={optionData ? JSON.stringify(optionData) : ""}
    data-sku-no-variant={skuNoVariant}
    data-no-of-options={nOfOptions}
  >
  <div class="neon-bundle-options-container-panel p-4 border">
      <!-- Header with Selection Indicators -->
      <div class="space-y-10 lg:space-y-0 lg:grid lg:grid-cols-2 lg:gap-12">
        {
          optionData?.firstOption && (
            <div class="select-option-section">

              {optionData.firstOption.hasColors ? (
                /* Color options with swatches */
                <div class="grid grid-cols-4 sm:grid-cols-5 lg:grid-cols-4 xl:grid-cols-5 gap-2 lg:gap-4">
                  {optionData.firstOption.values.map((option : any, index : number) => (
                    <div
                      class="neon-bundle-options-container-color-option flex flex-col items-center cursor-pointer hover:scale-110 transition-all duration-200"
                      data-option-type="first"
                      data-option-value={option.value}
                      data-option-index={index}
                    >
                      <div
                        class="neon-bundle-options-container-color-swatch w-12 h-12 lg:w-14 lg:h-14 rounded-2xl border-4 shadow-md"
                        style={`background-color: ${option.hex || "#ccc"}`}
                      />
                    </div>
                  ))}
                </div>
              ) : (
                /* Text-only options */
                <div class="grid grid-cols-2 lg:grid-cols-3 gap-2 lg:gap-4">
                  {optionData.firstOption.values.map((option : any, index : number) => (
                    <div
                      class="neon-bundle-options-container-size-option py-4 px-6 border-2 rounded-2xl cursor-pointer text-sm lg:text-base font-bold text-center transition-colors duration-200"
                      data-option-type="first"
                      data-option-value={option.value}
                      data-option-index={index}
                    >
                      {option.value}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )
        }

        {/* Second Option Rendering */}
        {
          optionData?.secondOption && (
            <div class="select-option-section">
  

              {optionData.secondOption.hasColors ? (
                /* Color options with swatches */
                <div class="grid grid-cols-4 sm:grid-cols-5 lg:grid-cols-4 xl:grid-cols-5 gap-2 lg:gap-4">
                  {optionData.secondOption.values.map((option : any, index : number) => (
                    <div
                      class="neon-bundle-options-container-color-option flex flex-col items-center cursor-pointer hover:scale-110 transition-all duration-200"
                      data-option-type="second"
                      data-option-value={option.value}
                      data-option-index={index}
                    >
                      <div
                        class="neon-bundle-options-container-color-swatch w-12 h-12 lg:w-14 lg:h-14 rounded-2xl border-4 shadow-md"
                        style={`background-color: ${option.hex || "#ccc"}`}
                      />
                    </div>
                  ))}
                </div>
              ) : (
                /* Text-only options */
                <div class="grid grid-cols-2 lg:grid-cols-3 gap-2 lg:gap-4">
                  {optionData.secondOption.values.map((option : any, index : number) => (
                    <div
                      class="neon-bundle-options-container-size-option py-4 px-6 border-2 rounded-2xl cursor-pointer text-sm lg:text-base font-bold text-center hover:border-gray-400 transition-colors duration-200"
                      data-option-type="second"
                      data-option-value={option.value}
                      data-option-index={index}
                    >
                      {option.value}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )
        }
      </div>
        {
          showSelectionIndicators && optionData && (
            <div class="flex justify-start items-center pt-2 flex-wrap gap-3 w-full lg:w-auto">
              {optionData.firstOption && (
                <div class="neon-bundle-options-container-selection-indicator flex items-center gap-2 justify-center lg:justify-start py-2 px-4 rounded-2xl border text-sm lg:text-base font-medium">
                  <span class="font-semibold">{optionData.firstOption.title}</span>
                  <span data-selected-first-option="" class="text-xs" />
                </div>
              )}
              {optionData.secondOption && (
                <div class="neon-bundle-options-container-selection-indicator flex items-center gap-2 justify-center lg:justify-start py-2 px-4 rounded-2xl border text-sm lg:text-base font-medium">
                  <span class="font-semibold">{optionData.secondOption.title}</span>
                  <span data-selected-second-option="" class="text-xs" />
                </div>
              )}
            </div>
          )
        }
    </div>
    </div>
  </neon-select-options-bundles>
</div>
<script>
  import "./NeonBundleOptionsContainer";
</script>
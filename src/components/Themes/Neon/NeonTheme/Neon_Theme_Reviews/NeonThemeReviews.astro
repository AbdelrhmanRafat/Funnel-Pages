---
import "./NeonThemeReviews.css";
import type { BlockData, Item } from "../../../../../lib/api/types";
import type { Language } from "../../../../../lib/utils/i18n/translations";
import NeonBuyNowButton from "../UI/NeonBuyNowButton/NeonBuyNowButton.astro";
import { FunnelNeonComponents } from "../../../../../lib/constants/themes";

// Get initial language from cookie during SSR
const currentLang: Language = (Astro.cookies.get("lang")?.value || "ar") as Language;
const isArabic = currentLang === "ar";

const data: BlockData = Astro.props.data;
const reviews: Item[] = data.items ?? [];
---
<section 
  id={FunnelNeonComponents.NeonReviews} 
  class="neon-section"
  aria-labelledby="reviews-heading"
>
  <h2 id="reviews-heading" class="neon-section-header">
    {isArabic ? data.title_ar : data.title_en}
  </h2>
  
    <div class="flex overflow-y-auto">
<div class="grid grid-cols-1 md:grid-cols-3 items-stretch p-4 gap-3" role="list" aria-label="Customer reviews">
  {reviews.map((review, index) => (
    <article
      class="flex h-full flex-1 flex-col gap-4 rounded-lg min-w-40 relative duration-200 ease-in-out hover:translate-y-[-2px] focus-within:outline-2 focus-within:outline-offset-2 neon-reviews-card"
      role="listitem"
      aria-labelledby={`review-author-${index}`}
    >
      <div
        class="w-full bg-center bg-no-repeat aspect-square bg-cover rounded-lg flex flex-col relative overflow-hidden neon-reviews-avatar"
        data-bg-image={review.image}
      ></div>
      <div class="flex flex-col gap-2">
        <p 
          id={`review-author-${index}`}
          class="text-base font-medium leading-normal neon-reviews-authorName"
        >
          {review.label}
        </p>
        <blockquote class="text-sm font-normal leading-normal italic relative neon-reviews-testimonial">
          "{review.content}"
        </blockquote>
      </div>
    </article>
  ))}
</div>
  </div>

  <div class="neon-reviews-action flex justify-center mt-6 sm:mt-8">
    <NeonBuyNowButton />
  </div>
</section>

<script>
  // Handle background images via data attributes to avoid inline styles
  document.addEventListener('DOMContentLoaded', () => {
    const avatars = document.querySelectorAll('[data-bg-image]');
    avatars.forEach((avatar) => {
      const bgImage = avatar.getAttribute('data-bg-image');
      if (bgImage) {
        (avatar as HTMLElement).style.backgroundImage = `url("${bgImage}")`;
      }
    });
  });
</script>
---
import "./NeonDeliveryFeatures.css"
import type { BlockData, Features, Item } from "../../../../../lib/api/types";
import type { Language } from "../../../../../lib/utils/i18n/translations";
import { FunnelNeonComponents } from "../../../../../lib/constants/themes";
import LucideIcon from "../../../../Shared/LucideIcon.astro";

// Get initial language from cookie during SSR
const currentLang: Language = (Astro.cookies.get("lang")?.value || "ar") as Language;
const isArabic = currentLang === "ar";

const data: BlockData = Astro.props.data;
const deliveryFeatures: Item[] = data.items ?? [];
---

<section id={FunnelNeonComponents.NeonDeliveryFeatures} class="neon-section">
  <!-- Header -->
  <div class="neon-section-header">
    {data.icon && <LucideIcon name={data.icon as any} width="48" height="48" />}
    <h5>{isArabic ? data.title_ar : data.title_en}</h5>
  </div>
  
  <!-- Delivery Features Grid - Variation 2: Card-Based Layout with Backgrounds -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    {
      deliveryFeatures.map((feature) => (
        <div class="neon-delivery-card rounded-2xl p-6 flex flex-col justify-center items-center gap-4 transition-all duration-300 hover:shadow-lg">
          <!-- Feature Icon -->
          <div class="neon-delivery-icon w-16 h-16 rounded-full flex items-center justify-center">
            {feature.icon ? 
              <LucideIcon name={feature.icon as any} width="32" height="32" class="neon-delivery-icon-symbol" /> :
              <LucideIcon name={data.icon as any} width="32" height="32" class="neon-delivery-icon-symbol" />
            }
          </div>
          
          <!-- Feature Content -->
          <h3 class="neon-delivery-title font-semibold text-lg leading-tight text-center">
            {feature.label}
          </h3>
          <p class="neon-delivery-subtitle text-sm leading-relaxed text-center">
            {feature.content}
          </p>
        </div>
      ))
    }
  </div>
</section>

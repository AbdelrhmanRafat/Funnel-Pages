---
// ArabicTouchSelectionOptionsWithoutBundles.astro - Enhanced with new observer
import "./arabictouchSelectionOptionsWithoutBundles.css";
import type { CustomOptions, Product } from "../../../../../../lib/api/types";
import { detectColorOption } from "../../../../../../lib/utils/Custom-Options-utils";
import ArabicTouchColorOptionsWithoutBundles from "./Color Options/ArabicTouchColorOptionsWithoutBundles.astro";
import ArabicTouchTextOptionsWithoutBundles from "./Text Options/ArabicTouchTextOptionsWithoutBundles.astro";

const product: Product = Astro.props.product;
const qty_NonVariant = product.qty;
const isHaveVariant = product.is_have_variant;
const customOptions: CustomOptions = product.custom_options;

// Component configuration
const allowMultipleSelection = false;
const showSelectionIndicators = true;
const enableAutoSelect = false;

// Clean data extraction with enhanced properties (keeping your existing structure)
let optionData: any = null;
const skuNoVariant = product.sku_code;
const priceNoVariant = product.price;
const priceAfterDiscountNoVariant = product.price_after_discount;
const skus = product.skus;

if (isHaveVariant === "true" && customOptions) {
    // Extract options in original JSON order
    const optionEntries = Object.entries(customOptions);
    
    const firstOption = optionEntries[0] ? {
        key: optionEntries[0][0],
        title: optionEntries[0][0],
        values: optionEntries[0][1]
    } : null;
    const secondOption = optionEntries[1] ? {
        key: optionEntries[1][0], 
        title: optionEntries[1][0],
        values: optionEntries[1][1]
    } : null;
    
    // Detect which option should show colors
    const colorDetection = detectColorOption(firstOption, secondOption);
    
    // Build associations for filtering with enhanced data - FIXED to handle single option
    const associations: any = {};
    if (firstOption) {
        firstOption.values.forEach(firstValue => {
            if (secondOption) {
                // Case 1: Both options exist - use available_options
                const availableSecondOptions = firstValue.available_options?.[secondOption.key];
                if (availableSecondOptions && Array.isArray(availableSecondOptions)) {
                    associations[firstValue.value] = availableSecondOptions.map(item => ({
                        value: item.value,
                        sku_id: item.sku_id,
                        hex: item.hex || null,
                        price: item.price || null,
                        price_after_discount: item.price_after_discount || null,
                        image: item.image || null,
                        qty: item.qty || 1,
                        ...item
                    }));
                }
            } else {
                // Case 2: Only first option exists - use SKU data or first option data
                // Find matching SKU for this first option value
                const matchingSku = skus.find(sku => {
                    // Check if any option in the SKU matches the first option value
                    return sku.options?.some(option => option.value === firstValue.value);
                });
                associations[firstValue.value] = [{
                    value: firstValue.value,
                    sku_id: matchingSku?.id || firstValue.sku_id || null,
                    hex: matchingSku?.options?.find(opt => opt.value === firstValue.value)?.hex || firstValue.hex || null,
                    price: matchingSku?.price || firstValue.price || null,
                    price_after_discount: matchingSku?.price_after_discount || firstValue.price_after_discount || null,
                    image: matchingSku?.image || firstValue.image || null,
                    qty: matchingSku?.qty || firstValue.qty || 1
                }];
            }
        });
    }
    
    // Create enhanced option metadata maps for quick lookups (keeping your structure)
    const firstOptionMetadata: any = {};
    const secondOptionMetadata: any = {};
    
    if (firstOption) {
        if (secondOption === null) {
            // If secondOption is null, populate firstOptionMetadata using skus data
            firstOption.values.forEach(firstValue => {
                // Find matching SKU for this first option value
                const matchingSku = skus.find(sku => {
                    // Check if any option in the SKU matches the first option value
                    return sku.options?.some(option => option.value === firstValue.value);
                });
                
                firstOptionMetadata[firstValue.value] = {
                    hex: matchingSku?.options?.find(opt => opt.value === firstValue.value)?.hex || firstValue.hex || null,
                    price: matchingSku?.price || firstValue.price || null,
                    price_after_discount: matchingSku?.price_after_discount || firstValue.price_after_discount || null,
                    image: matchingSku?.image || firstValue.image || null,
                    qty: matchingSku?.qty || firstValue.qty || 1
                };
            });
        } else {
            // If secondOption exists, keep the current behavior
            firstOption.values.forEach(value => {
                firstOptionMetadata[value.value] = {
                    hex: value.hex || null,
                    price: value.price || null,
                    price_after_discount: value.price_after_discount || null,
                    image: value.image || null,
                    qty: value.qty || 1
                };
            });
        }
    }
    
    if (secondOption) {
        secondOption.values.forEach(value => {
            secondOptionMetadata[value.value] = {
                hex: value.hex || null,
                price: value.price || null,
                price_after_discount: value.price_after_discount || null,
                image: value.image || null,
                qty: value.qty || 1
            };
        });
    }
    
    // Create clean data structure with enhanced metadata (keeping your structure)
    optionData = {
        firstOption: firstOption ? {
            ...firstOption,
            hasColors: colorDetection.firstHasColors
        } : null,
        secondOption: secondOption ? {
            ...secondOption, 
            hasColors: colorDetection.secondHasColors
        } : null,
        associations,
        firstOptionMetadata,
        secondOptionMetadata,
        basePrice: product.price || null,
        basePriceAfterDiscount: product.price_after_discount || null,
        baseImage: product.image || null
    };
}
---

<div id="arabictouch-selection-options-without-bundles" class="arabictouch-selection-options-without-bundles w-full">
  <arabictouch-select-options 
    data-options-allow-multiple={allowMultipleSelection}
    data-options-show-indicators={showSelectionIndicators}
    data-options-auto-select={enableAutoSelect}
    data-options-is-variant={isHaveVariant}
    data-option-data={optionData ? JSON.stringify(optionData) : ''}
    data-sku-no-variant={skuNoVariant}
    data-base-price={priceNoVariant || ''}
    data-base-price-discount={priceAfterDiscountNoVariant || ''}
    data-base-image={product.image || ''}
    data-qty-non-variant={qty_NonVariant || 1}
  >
    <section id="arabictouch-selection-options-without-bundles-section">
      <div class="flex gap-6 flex-col-reverse">
        
        <!-- OPTIONS SECTION -->
        {isHaveVariant === "true" ? (
          <div class="flex-1">
            <div class="space-y-6">
              <!-- First Option -->
              {optionData?.firstOption && (
                <div class="arabictouch-selection-options-without-bundles-option-group">
                  {optionData.firstOption.hasColors ? (
                    <div class="arabictouch-selection-options-without-bundles-color-grid flex flex-wrap gap-3">
                      {optionData.firstOption.values.map((option : any, index : number) => (
                        <ArabicTouchColorOptionsWithoutBundles 
                          option={option}
                          index={index}
                          optionType="first"
                        />
                      ))}
                    </div>
                  ) : (
                    <div class="arabictouch-selection-options-without-bundles-text-grid grid grid-cols-2 sm:grid-cols-3 gap-3">
                      {optionData.firstOption.values.map((option : any, index : number) => (
                        <ArabicTouchTextOptionsWithoutBundles 
                          option={option}
                          index={index}
                          optionType="first"
                        />
                      ))}
                    </div>
                  )}
                </div>
              )}
              
              <!-- Second Option -->
              {optionData?.secondOption && (
                <div class="arabictouch-selection-options-without-bundles-option-group">
                  {optionData.secondOption.hasColors ? (
                    <div class="arabictouch-selection-options-without-bundles-color-grid flex flex-wrap gap-3">
                      {optionData.secondOption.values.map((option : any, index : number) => (
                        <ArabicTouchColorOptionsWithoutBundles 
                          option={option}
                          index={index}
                          optionType="second"
                        />
                      ))}
                    </div>
                  ) : (
                    <div class="arabictouch-selection-options-without-bundles-text-grid flex flex-wrap justify-start content-start gap-3">
                      {optionData.secondOption.values.map((option : any, index : number) => (
                        <ArabicTouchTextOptionsWithoutBundles 
                          option={option}
                          index={index}
                          optionType="second"
                        />
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        ) : null}
        
        <!-- QUANTITY SECTION -->
        <div class="flex-1 lg:max-w-xs">
          <div class="space-y-4">
            
            <!-- Quantity Controls -->
            <div>
              <div class="flex justify-start items-center gap-1 pb-4">
                <div>
                  <label class="arabictouch-selection-options-without-bundles-qty-label text-2xl font-bold" data-translate="productFunnel.maxAvailable">
                  </label>
                </div>
                {isHaveVariant === "true" && (
                  <div class="arabictouch-selection-options-without-bundles-max-qty-display arabictouch-selection-options-without-bundles-max-qty-indicator hidden" data-max-qty-display style="display: none;">
                    <span class="inline-block ms-1">
                      <span data-max-qty-value class="arabictouch-selection-options-without-bundles-max-qty-value text-2xl font-bold">0</span>
                    </span>
                  </div>
                )}

                {isHaveVariant === "false" && (
                  <div class="arabictouch-selection-options-without-bundles-max-qty-display text-2xl font-bold">
                    <span class="inline-block ms-1">
                      <span data-max-qty-value class="arabictouch-selection-options-without-bundles-max-qty-value font-medium">{qty_NonVariant}</span>
                    </span>
                  </div>
                )}
              </div>
              <div class="arabictouch-selection-options-without-bundles-qty-controls flex items-center gap-3">
                <button 
                  type="button" 
                  class="arabictouch-selection-options-without-bundles-qty-btn arabictouch-selection-options-without-bundles-qty-decrease w-10 h-10 flex items-center justify-center rounded-2xl transition-colors duration-200 focus:outline-none focus:ring-2 disabled:opacity-50 disabled:cursor-not-allowed"
                  data-qty-action="decrease"
                >
                  <span class="text-lg font-medium select-none">−</span>
                </button>
                
                <input 
                  type="number" 
                  class="arabictouch-selection-options-without-bundles-qty-input w-20 h-10 text-center rounded-2xl focus:outline-none focus:ring-2 transition-all duration-200" 
                  value="1" 
                  min="1" 
                  data-qty-input
                />
                
                <button 
                  type="button" 
                  class="arabictouch-selection-options-without-bundles-qty-btn arabictouch-selection-options-without-bundles-qty-increase w-10 h-10 flex items-center justify-center rounded-2xl transition-colors duration-200 focus:outline-none focus:ring-2 disabled:opacity-50 disabled:cursor-not-allowed"
                  data-qty-action="increase"
                >
                  <span class="text-lg font-medium select-none">+</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </arabictouch-select-options>
</div>

<script>
  import "./arabictouchSelectionOptionsWithoutBundles";
</script>
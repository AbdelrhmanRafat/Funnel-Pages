---
// This component is the main entry point for the ArabicTouch theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./ArabicTouchComponent.css";
import ArabicTouchThemeHeader from "./ArabicTouchTheme/ArabicTouch_Header/ArabicTouchThemeHeader.astro";
import ArabicTouchThemeProduct from "./ArabicTouchTheme/ArabicTouchThemeProduct/ArabicTouchThemeProduct.astro";
import ArabicTouchThemeCountDown from "./ArabicTouchTheme/ArabicTouchThemeCountdown/ArabicTouchThemeCountDown.astro";
import ArabicTouchFaq from "./ArabicTouchTheme/ArabicTouch_Faq/ArabicTouchFaq.astro";
import ArabicTouchProductPreviewComponent from "./ArabicTouchTheme/ArabicTouch_ProductPreview/ArabicTouchProductPreviewComponent.astro";
import { getArabicTouchThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelArabicTouchComponents } from "../../../lib/constants/themes";
import ArabicTouchThemeFooter from "./ArabicTouchTheme/ArabicTouchThemeFooter/ArabicTouchThemeFooter.astro";
import ArabicTouchThemeReviews from "./ArabicTouchTheme/ArabicTouch_Theme_Reviews/ArabicTouchThemeReviews.astro";
import ArabicTouchProductUsage from "./ArabicTouchTheme/ArabicTouch_ProductUsage/ArabicTouchProductUsage.astro";
import ArabicTouchDeliveryFeatures from "./ArabicTouchTheme/ArabicTouch_Delivery_Features/ArabicTouchDeliveryFeatures.astro";
import ArabicTouchProductFeatures from "./ArabicTouchTheme/ArabicTouch_Product_Features/ArabicTouchProductFeatures.astro";
import ArabicTouchThemeTodayStatistics from "./ArabicTouchTheme/ArabicTouchThemeTodayStatistics/ArabicTouchThemeTodayStatistics.astro";
import ArabicTouchLogosCarousel from "./ArabicTouchTheme/ArabicTouchLogosCarousel/ArabicTouchLogosCarousel.astro";
import ArabicTouchButtonWithLink from "./ArabicTouchTheme/ArabicTouchButtonWithLink/ArabicTouchButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";
import { ArabicTouchGallery } from "./ArabicTouchTheme/UI/ArabicTouchProductGallery/ArabicTouchProductGalleryComponent";
import ArabicTouchProductGalleryComponent from "./ArabicTouchTheme/UI/ArabicTouchProductGallery/ArabicTouchProductGalleryComponent.astro";
import ArabictouchImageTextOverlay from "./ArabicTouchTheme/ArabicTouch_Image_Text_Overlay/arabictouchImageTextOverlay.astro";
import ArabictouchImageTextBeside from "./ArabicTouchTheme/ArabicTouch_Image_Text_Beside/arabictouchImageTextBeside.astro";
import ArabictouchBeforeAfter from "./ArabicTouchTheme/ArabicTouchBefore&AfterImage/arabictouchBefore&After.astro";
import ArabictouchGridImages from "./ArabicTouchTheme/ArabicTouchGridImagesComponent/arabictouchGridImages.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding ArabicTouch theme components and data.
const arabicTouchComponentNames: [FunnelArabicTouchComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getArabicTouchThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelArabicTouchComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelArabicTouchComponents,
): ComponentCheckResult {
  const found = arabicTouchComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelArabicTouchComponents.ArabicTouchHeader,
  FunnelArabicTouchComponents.ArabicTouchProductFunnel, // Always render (required)
  FunnelArabicTouchComponents.ArabicTouchProductFeatures,
  FunnelArabicTouchComponents.ArabicTouchProductPreview,
  FunnelArabicTouchComponents.ArabicTouchProductUsage,
  FunnelArabicTouchComponents.ArabicTouchLogosCarousel,
  FunnelArabicTouchComponents.ArabicTouchButtonWithLink,
  FunnelArabicTouchComponents.ArabicTouchTodayStatistics,
  FunnelArabicTouchComponents.ArabicTouchGallery,
  FunnelArabicTouchComponents.ArabicTouch_Before_After,
  FunnelArabicTouchComponents.ArabicTouchReviews,
  FunnelArabicTouchComponents.ArabicTouchTextBar,
  FunnelArabicTouchComponents.ArabicTouchImageTextOverLay,
  FunnelArabicTouchComponents.ArabicTouchImageTextBeside,
  FunnelArabicTouchComponents.ArabicTouchFaq,
  FunnelArabicTouchComponents.ArabicTouchDeliveryFeatures,
  FunnelArabicTouchComponents.ArabicTouchCountdown,
  FunnelArabicTouchComponents.ArabicTouchFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelArabicTouchComponents.ArabicTouchProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelArabicTouchComponents.ArabicTouchFormFields,
);


const isCuponDataFound = isComponentFound(
  FunnelArabicTouchComponents.ArabicTouchCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelArabicTouchComponents.ArabicTouchVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelArabicTouchComponents.ArabicTouchOrderThroughWhatsapp,
);


const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelArabicTouchComponents.ArabicTouchOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelArabicTouchComponents.ArabicTouchRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;


const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

  const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

  const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;
  

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="arabictouch-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelArabicTouchComponents.ArabicTouchHeader) {
        const headerData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchHeader,
        );
        return headerData.isComponentFound ? (
          <ArabicTouchThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelArabicTouchComponents.ArabicTouchProductFunnel) {
        return (
          <ArabicTouchThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchCountdown) {
        const countdownData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchCountdown,
        );
        return countdownData.isComponentFound ? (
          <ArabicTouchThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      
      if (componentName === FunnelArabicTouchComponents.ArabicTouchFaq) {
        const faqData = isComponentFound(FunnelArabicTouchComponents.ArabicTouchFaq);
        return faqData.isComponentFound ? (
          <ArabicTouchFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelArabicTouchComponents.ArabicTouchLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <ArabicTouchLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <ArabicTouchProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <ArabicTouchButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchGallery) {
        const galleryData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchGallery,
        );
        return galleryData.isComponentFound ? (
          <ArabictouchGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <ArabicTouchThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <ArabicTouchDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <ArabicTouchProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchReviews) {
        const ReviewsData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchReviews,
        );
        return ReviewsData.isComponentFound ? (
          <ArabicTouchThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchTextBar) {
        const TextBarData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchTextBar,
        );
        return TextBarData.isComponentFound ? (
          <ArabicTouchProductGalleryComponent data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <ArabictouchImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <ArabictouchImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchProductUsage) {
        const productUsageData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <ArabicTouchProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouch_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouch_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <ArabictouchBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelArabicTouchComponents.ArabicTouchFooter) {
        const footerData = isComponentFound(
          FunnelArabicTouchComponents.ArabicTouchFooter,
        );
        return footerData.isComponentFound ? (
          <ArabicTouchThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 arabictouch-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />

  </button>
  </section>
</main>
<script>
  import "./ArabicTouchTheme.config"
</script>
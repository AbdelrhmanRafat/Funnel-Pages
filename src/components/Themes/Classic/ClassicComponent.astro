---
// This component is the main entry point for the Classic theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Header renders first, Footer renders last, Product renders second, and all other components
// render in the exact order they appear in the JSON response.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./ClassicComponent.css";
import ClassicThemeHeader from "./Blocks/Classic_Header/ClassicThemeHeader.astro";
import ClassicThemeProduct from "./Blocks/ClassicThemeProduct/ClassicThemeProduct.astro";
import ClassicThemeCountDown from "./Blocks/ClassicThemeCountdown/ClassicThemeCountDown.astro";
import ClassicFaq from "./Blocks/Classic_Faq/ClassicFaq.astro";
import ClassicProductPreviewComponent from "./Blocks/Classic_ProductPreview/ClassicProductPreviewComponent.astro";
import { getClassicThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data, Product } from "../../../lib/api/types";
import { FunnelClassicComponents } from "../../../lib/constants/themes";
import ClassicThemeFooter from "./Blocks/ClassicThemeFooter/ClassicThemeFooter.astro";
import ClassicThemeReviews from "./Blocks/Classic_Theme_Reviews/ClassicThemeReviews.astro";
import ClassicProductUsage from "./Blocks/Classic_ProductUsage/ClassicProductUsage.astro";
import ClassicDeliveryFeatures from "./Blocks/Classic_Delivery_Features/ClassicDeliveryFeatures.astro";
import ClassicProductFeatures from "./Blocks/Classic_Product_Features/ClassicProductFeatures.astro";
import ClassicThemeTextBar from "./Blocks/Classic_Text_Bar/classicThemeTextBar.astro";
import ClassicBeforeAfter from "./Blocks/ClassicBefore&AfterImage/classicBefore&After.astro";
import ClassicImageTextOverlay from "./Blocks/Classic_Image_Text_Overlay/classicImageTextOverlay.astro";
import ClassicImageTextBeside from "./Blocks/Classic_Image_Text_Beside/classicImageTextBeside.astro";
import ClassicThemeTodayStatistics from "./Blocks/ClassicThemeTodayStatistics/ClassicThemeTodayStatistics.astro";
import ClassicGridImages from "./Blocks/ClassicGridImagesComponent/classicGridImages.astro";
import ClassicLogosCarousel from "./Blocks/ClassicLogosCarousel/ClassicLogosCarousel.astro";
import ClassicButtonWithLink from "./Blocks/ClassicButtonWithLink/ClassicButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Classic theme components and data.
// This preserves the original order from the JSON file.
const classicComponentNames: [FunnelClassicComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getClassicThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelClassicComponents, BlockData] =>
        tuple !== undefined,
    );

// Helper function to find component data by name
function getComponentData(
  componentName: FunnelClassicComponents,
): BlockData | undefined {
  const found = classicComponentNames.find(([comp]) => comp === componentName);
  return found?.[1];
}

// Filter out Header, Product, and Footer components for separate handling
const otherComponents = classicComponentNames.filter(
  ([componentName]) =>
    componentName !== FunnelClassicComponents.ClassicHeader &&
    componentName !== FunnelClassicComponents.ClassicProductFunnel &&
    componentName !== FunnelClassicComponents.ClassicFooter,
);

// Extract specific component data
const headerData = getComponentData(FunnelClassicComponents.ClassicHeader);
const productFunnelData = getComponentData(
  FunnelClassicComponents.ClassicProductFunnel,
);
const footerData = getComponentData(FunnelClassicComponents.ClassicFooter);

// Extract product-related data for special handling
const formFieldsData = getComponentData(
  FunnelClassicComponents.ClassicFormFields,
);
const cuponData = getComponentData(FunnelClassicComponents.ClassicCoupon);
const fakeVisitorsData = getComponentData(
  FunnelClassicComponents.ClassicVisitors,
);
const ratingData = getComponentData(FunnelClassicComponents.ClassicRates);
const orderConfirmationNoticeData = getComponentData(
  FunnelClassicComponents.ClassicOrderConfirmationNotice,
);
const orderThroughWhatsappData = getComponentData(
  FunnelClassicComponents.ClassicOrderThroughWhatsapp,
);

const purchaseOptions = productFunnelData?.purchase_options;

// Final fallback: if all product-related components are not found, set product to empty object
const isAnyProductComponentAvailable =
  productFunnelData ||
  formFieldsData ||
  cuponData ||
  fakeVisitorsData ||
  ratingData ||
  orderConfirmationNoticeData ||
  orderThroughWhatsappData;

if (!isAnyProductComponentAvailable) {
  funnelPage.product = {} as Product;
}
const componentJsonOrder = funnelPage.blocks.map(block => block.key);

---

<main class="classic-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
    <!-- Header - Always renders first if present -->
    {
      headerData && (
        <ClassicThemeHeader data={headerData} funnelPage={funnelPage} />
      )
    }

    <!-- Product - Always renders second if present -->
    {
      funnelPage.product && Object.keys(funnelPage.product).length > 0 && (
        <ClassicThemeProduct
          formFieldsData={formFieldsData}
          ratingData={ratingData}
          fakeVisitorsData={fakeVisitorsData}
          orderConfirmationNoticeData={orderConfirmationNoticeData}
          orderThroughWhatsappData={orderThroughWhatsappData}
          product={funnelPage.product}
          cuponData={cuponData}
          purchaseOptions={purchaseOptions}
          componentJsonOrder={componentJsonOrder}
          Add
          this
          line
        />
      )
    }

    <!-- Other components - Render in JSON order -->
    {
      otherComponents.map(([componentName, componentData]) => {
        switch (componentName) {
          case FunnelClassicComponents.ClassicCountdown:
            return <ClassicThemeCountDown data={componentData} />;

          case FunnelClassicComponents.ClassicFaq:
            return <ClassicFaq data={componentData} />;

          case FunnelClassicComponents.classicLogosCarousel:
            return <ClassicLogosCarousel data={componentData} />;

          case FunnelClassicComponents.ClassicProductPreview:
            return <ClassicProductPreviewComponent data={componentData} />;

          case FunnelClassicComponents.ClassicButtonWithLink:
            return <ClassicButtonWithLink data={componentData} />;

          case FunnelClassicComponents.ClassicGallery:
            return <ClassicGridImages data={componentData} />;

          case FunnelClassicComponents.classicTodayStatistics:
            return <ClassicThemeTodayStatistics data={componentData} />;

          case FunnelClassicComponents.ClassicDeliveryFeatures:
            return <ClassicDeliveryFeatures data={componentData} />;

          case FunnelClassicComponents.ClassicProductFeatures:
            return <ClassicProductFeatures data={componentData} />;

          case FunnelClassicComponents.ClassicReviews:
            return <ClassicThemeReviews data={componentData} />;

          case FunnelClassicComponents.ClassicTextBar:
            return <ClassicThemeTextBar data={componentData} />;

          case FunnelClassicComponents.ClassicImageTextOverLay:
            return <ClassicImageTextOverlay data={componentData} />;

          case FunnelClassicComponents.ClassicImageTextBeside:
            return <ClassicImageTextBeside data={componentData} />;

          case FunnelClassicComponents.ClassicProductUsage:
            return <ClassicProductUsage data={componentData} />;

          case FunnelClassicComponents.Classic_Before_After:
            return <ClassicBeforeAfter data={componentData} />;

          default:
            return null;
        }
      })
    }

    <!-- Footer - Always renders last if present -->
    {footerData && <ClassicThemeFooter data={footerData} />}

    <button
      id="scrollToTopBtn"
      class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 classic-scrollToTopBtn"
    >
      <LucideIcon name="MoveUp" width="32" height="32" />
    </button>
  </section>
</main>
<script>
  import "./ClassicTheme.config";
</script>

---
import "../../../styles/global.css";

import ClassicThemeHeader from "./ClassicTheme/Classic_Header/ClassicThemeHeader.astro";
import ClassicThemeFormFields from "./ClassicTheme/Classic_FormFields/ClassicThemeFormFields.astro";
import ClassicThemeProduct from "./ClassicTheme/ClassicThemeProduct/ClassicThemeProduct.astro";
import ClassicThemeCountDown from "./ClassicTheme/ClassicThemeCountdown/ClassicThemeCountDown.astro";
import { getClassicThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelClassicComponents } from "../../../lib/constants/themes";

interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

const classicComponentNames: [FunnelClassicComponents, BlockData][] = funnelPage.blocks
  .map(block => {
    const component = getClassicThemeComponent(block.name);
    return component ? [component, block.data] : undefined;
  })
  .filter((tuple): tuple is [FunnelClassicComponents, BlockData] => tuple !== undefined);

function isComponentFound(componentName: FunnelClassicComponents): ComponentCheckResult {
  const found = classicComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1]
  };
}

---
<main class="container flex-col justify-center items-center gap-4">

  {isComponentFound(FunnelClassicComponents.ClassicHeader).isComponentFound && (
    <ClassicThemeHeader data={isComponentFound(FunnelClassicComponents.ClassicHeader).componentData} />
  )}

<ClassicThemeProduct Product={funnelPage.product}></ClassicThemeProduct>

{isComponentFound(FunnelClassicComponents.ClassicFormFields).isComponentFound && (
  <ClassicThemeFormFields data={isComponentFound(FunnelClassicComponents.ClassicFormFields).componentData} />
)}
{isComponentFound(FunnelClassicComponents.ClassicCountdown).isComponentFound && (
  <ClassicThemeCountDown data={isComponentFound(FunnelClassicComponents.ClassicCountdown).componentData} />
)}
</main>

<!-- 
{isComponentFound(FunnelClassicComponents.ClassicTodayOrders).isComponentFound && (
  <ClassicThemeTodayOrders data={isComponentFound(FunnelClassicComponents.ClassicTodayOrders).componentData}  />
)}

{isComponentFound(FunnelClassicComponents.ClassicRates).isComponentFound && (
  <ClassicThemeRates data={isComponentFound(FunnelClassicComponents.ClassicRates).componentData} />
)}


{isComponentFound(FunnelClassicComponents.ClassicProductFunnel).isComponentFound && (
  <ClassicThemeProductFunnel data={isComponentFound(FunnelClassicComponents.ClassicProductFunnel).componentData} />
)}

{isComponentFound(FunnelClassicComponents.ClassicFooter).isComponentFound && (
  <ClassicThemeFooter data={isComponentFound(FunnelClassicComponents.ClassicFooter).componentData} />
)}

 -->
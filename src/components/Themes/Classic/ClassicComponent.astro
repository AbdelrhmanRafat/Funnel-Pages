---
// This component is the main entry point for the Classic theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "./ClassicComponent.css";
import ClassicThemeHeader from "./ClassicTheme/Classic_Header/ClassicThemeHeader.astro";
import ClassicThemeProduct from "./ClassicTheme/ClassicThemeProduct/ClassicThemeProduct.astro";
import ClassicThemeCountDown from "./ClassicTheme/ClassicThemeCountdown/ClassicThemeCountDown.astro";
import ClassicFaq from "./ClassicTheme/Classic_Faq/ClassicFaq.astro";
import ClassicProductPreviewComponent from "./ClassicTheme/Classic_ProductPreview/ClassicProductPreviewComponent.astro";
import { getClassicThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelClassicComponents } from "../../../lib/constants/themes";
import ClassicThemeFooter from "./ClassicTheme/ClassicThemeFooter/ClassicThemeFooter.astro";
import ClassicThemeReviews from "./ClassicTheme/Classic_Theme_Reviews/ClassicThemeReviews.astro";
import ClassicProductUsage from "./ClassicTheme/Classic_ProductUsage/ClassicProductUsage.astro";
import ClassicDeliveryFeatures from "./ClassicTheme/Classic_Delivery_Features/ClassicDeliveryFeatures.astro";
import ClassicProductFeatures from "./ClassicTheme/Classic_Product_Features/ClassicProductFeatures.astro";
import ClassicThemeTextBar from "./ClassicTheme/Classic_Text_Bar/classicThemeTextBar.astro";
import ClassicBeforeAfter from "./ClassicTheme/ClassicBefore&AfterImage/classicBefore&After.astro";
import ClassicImageTextOverlay from "./ClassicTheme/Classic_Image_Text_Overlay/classicImageTextOverlay.astro";
import ClassicImageTextBeside from "./ClassicTheme/Classic_Image_Text_Beside/classicImageTextBeside.astro";
import ClassicThemeTodayStatistics from "./ClassicTheme/ClassicThemeTodayStatistics/ClassicThemeTodayStatistics.astro";
import ClassicGridImages from "./ClassicTheme/ClassicGridImagesComponent/classicGridImages.astro";
import ClassicLogosCarousel from "./ClassicTheme/ClassicLogosCarousel/ClassicLogosCarousel.astro";
import ClassicButtonWithLink from "./ClassicTheme/ClassicButtonWithLink/ClassicButtonWithLink.astro";
import LucideIcon from "../../Shared/LucideIcon.astro";


interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Classic theme components and data.
const classicComponentNames: [FunnelClassicComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getClassicThemeComponent(block.key);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelClassicComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelClassicComponents,
): ComponentCheckResult {
  const found = classicComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelClassicComponents.ClassicHeader,
  FunnelClassicComponents.ClassicProductFunnel, // Always render (required)
  FunnelClassicComponents.ClassicProductFeatures,
  FunnelClassicComponents.ClassicProductPreview,
  FunnelClassicComponents.ClassicProductUsage,
  FunnelClassicComponents.classicLogosCarousel,
  FunnelClassicComponents.ClassicButtonWithLink,
  FunnelClassicComponents.classicTodayStatistics,
  FunnelClassicComponents.ClassicGallery,
  FunnelClassicComponents.Classic_Before_After,
  FunnelClassicComponents.ClassicReviews,
  FunnelClassicComponents.ClassicTextBar,
  FunnelClassicComponents.ClassicImageTextOverLay,
  FunnelClassicComponents.ClassicImageTextBeside,
  FunnelClassicComponents.ClassicFaq,
  FunnelClassicComponents.ClassicDeliveryFeatures,
  FunnelClassicComponents.ClassicCountdown,
  FunnelClassicComponents.ClassicFooter,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelClassicComponents.ClassicProductFunnel,
);

const isFormFieldsDataFound = isComponentFound(
  FunnelClassicComponents.ClassicFormFields,
);


const isCuponDataFound = isComponentFound(
  FunnelClassicComponents.ClassicCoupon,
);

const isFakeVisitorsDataFound = isComponentFound(
  FunnelClassicComponents.ClassicVisitors,
);

const isOrderThroughWhatsappDataFound = isComponentFound(
  FunnelClassicComponents.ClassicOrderThroughWhatsapp,
);


const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelClassicComponents.ClassicOrderConfirmationNotice,
);
const isRatingFound = isComponentFound(FunnelClassicComponents.ClassicRates);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;


const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;

  const cuponData = isCuponDataFound.isComponentFound
  ? isCuponDataFound.componentData
  : undefined;

  const fakeVisitorsData = isFakeVisitorsDataFound.isComponentFound
  ? isFakeVisitorsDataFound.componentData
  : undefined;
  

const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;

const orderThroughWhatsappData =
  isOrderThroughWhatsappDataFound.isComponentFound
    ? isOrderThroughWhatsappDataFound.componentData
    : undefined;

---

<main class="classic-main-color">
  <section class="lg:container w-11/12 mx-auto flex flex-col gap-7">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelClassicComponents.ClassicHeader) {
        const headerData = isComponentFound(
          FunnelClassicComponents.ClassicHeader,
        );
        return headerData.isComponentFound ? (
          <ClassicThemeHeader data={headerData.componentData} funnelPage={funnelPage} />
        ) : null;
      }
      
      if (componentName === FunnelClassicComponents.ClassicProductFunnel) {
        return (
          <ClassicThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            fakeVisitorsData={fakeVisitorsData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            orderThroughWhatsappData={orderThroughWhatsappData}
            product={funnelPage.product}
            cuponData={cuponData}
            purchaseOptions={purchaseOptions}
          />
        );
      }
      if (componentName === FunnelClassicComponents.ClassicCountdown) {
        const countdownData = isComponentFound(
          FunnelClassicComponents.ClassicCountdown,
        );
        return countdownData.isComponentFound ? (
          <ClassicThemeCountDown data={countdownData.componentData} />
        ) : null;
      }
      
      
      if (componentName === FunnelClassicComponents.ClassicFaq) {
        const faqData = isComponentFound(FunnelClassicComponents.ClassicFaq);
        return faqData.isComponentFound ? (
          <ClassicFaq data={faqData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.classicLogosCarousel) {
        const logoscarouselData = isComponentFound(FunnelClassicComponents.classicLogosCarousel);
        return logoscarouselData.isComponentFound ? (
          <ClassicLogosCarousel data={logoscarouselData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicProductPreview) {
        const productPreviewData = isComponentFound(
          FunnelClassicComponents.ClassicProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <ClassicProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicButtonWithLink) {
        const buttonWithLinkData = isComponentFound(
          FunnelClassicComponents.ClassicButtonWithLink,
        );
        return buttonWithLinkData.isComponentFound ? (
          <ClassicButtonWithLink
            data={buttonWithLinkData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicGallery) {
        const galleryData = isComponentFound(
          FunnelClassicComponents.ClassicGallery,
        );
        return galleryData.isComponentFound ? (
          <ClassicGridImages
            data={galleryData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.classicTodayStatistics) {
        const todayOrdersData = isComponentFound(
          FunnelClassicComponents.classicTodayStatistics,
        );
        return todayOrdersData.isComponentFound ? (
          <ClassicThemeTodayStatistics
            data={todayOrdersData.componentData}
          />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelClassicComponents.ClassicDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <ClassicDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicProductFeatures) {
        const ProductFeaturesData = isComponentFound(
          FunnelClassicComponents.ClassicProductFeatures,
        );
        return ProductFeaturesData.isComponentFound ? (
          <ClassicProductFeatures data={ProductFeaturesData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicReviews) {
        const ReviewsData = isComponentFound(
          FunnelClassicComponents.ClassicReviews,
        );
        return ReviewsData.isComponentFound ? (
          <ClassicThemeReviews data={ReviewsData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicTextBar) {
        const TextBarData = isComponentFound(
          FunnelClassicComponents.ClassicTextBar,
        );
        return TextBarData.isComponentFound ? (
          <ClassicThemeTextBar data={TextBarData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicImageTextOverLay) {
        const ImageTextData = isComponentFound(
          FunnelClassicComponents.ClassicImageTextOverLay,
        );
        return ImageTextData.isComponentFound ? (
          <ClassicImageTextOverlay data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicImageTextBeside) {
        const ImageTextData = isComponentFound(
          FunnelClassicComponents.ClassicImageTextBeside,
        );
        return ImageTextData.isComponentFound ? (
          <ClassicImageTextBeside data={ImageTextData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicProductUsage) {
        const productUsageData = isComponentFound(
          FunnelClassicComponents.ClassicProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <ClassicProductUsage data={productUsageData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.Classic_Before_After) {
        const BeforeAfterData = isComponentFound(
          FunnelClassicComponents.Classic_Before_After,
        );
        return BeforeAfterData.isComponentFound ? (
          <ClassicBeforeAfter data={BeforeAfterData.componentData} />
        ) : null;
      }
      if (componentName === FunnelClassicComponents.ClassicFooter) {
        const footerData = isComponentFound(
          FunnelClassicComponents.ClassicFooter,
        );
        return footerData.isComponentFound ? (
          <ClassicThemeFooter data={footerData.componentData} />
        ) : null;
      }
      return null;
    })
  }
  <button id="scrollToTopBtn" class="fixed bottom-3 right-3 z-[50] md:bottom-5 md:right-5 classic-scrollToTopBtn">
   <LucideIcon name="MoveUp" width="32" height="32" />

  </button>
  </section>
</main>
<script>
  import "./ClassicTheme.config"
</script>
---
// This component is the main entry point for the Classic theme.
// It orchestrates the rendering of various sub-components based on the data received from the API.
// Props:
// - funnelPage: An object of type Data, containing all the information for the funnel page.
import "../../../styles/global.css";
import ClassicThemeHeader from "./ClassicTheme/Classic_Header/ClassicThemeHeader.astro";
import ClassicThemeProduct from "./ClassicTheme/ClassicThemeProduct/ClassicThemeProduct.astro";
import ClassicThemeCountDown from "./ClassicTheme/ClassicThemeCountdown/ClassicThemeCountDown.astro";
import ClassicFaq from "./ClassicTheme/Classic_Faq/ClassicFaq.astro";
import ClassicProductPreviewComponent from "./ClassicTheme/Classic_ProductPreview/ClassicProductPreviewComponent.astro";
import { getClassicThemeComponent } from "../../../lib/utils/ThemeSelect";
import type { BlockData, Data } from "../../../lib/api/types";
import { FunnelClassicComponents } from "../../../lib/constants/themes";
import ClassicDeliveryFeatures from "./ClassicTheme/Classic_Delivery_Features/ClassicDeliveryFeatures.astro";
import ClassicProductUsage from "./ClassicTheme/Classic_ProductUsage/ClassicProductUsage.astro";

interface ComponentCheckResult {
  isComponentFound: boolean;
  componentData: BlockData | undefined;
}

const funnelPage: Data = Astro.props.funnelPage;

// Maps the block names from the API response to their corresponding Classic theme components and data.
const classicComponentNames: [FunnelClassicComponents, BlockData][] =
  funnelPage.blocks
    .map((block) => {
      const component = getClassicThemeComponent(block.name);
      return component ? [component, block.data] : undefined;
    })
    .filter(
      (tuple): tuple is [FunnelClassicComponents, BlockData] =>
        tuple !== undefined,
    );

// Checks if a specific component is present in the API response and returns its data if found.
function isComponentFound(
  componentName: FunnelClassicComponents,
): ComponentCheckResult {
  const found = classicComponentNames.find(([comp]) => comp === componentName);
  return {
    isComponentFound: !!found,
    componentData: found?.[1],
  };
}

// Define render order - just change this array to reorder components!
const RENDER_ORDER = [
  FunnelClassicComponents.ClassicHeader,
  FunnelClassicComponents.ClassicProductFunnel, // Always render (required)
  FunnelClassicComponents.ClassicOrderConfirmationNotice,
  FunnelClassicComponents.ClassicProductPreview,
  FunnelClassicComponents.ClassicDeliveryFeatures,
  FunnelClassicComponents.ClassicFaq,
  FunnelClassicComponents.ClassicProductUsage,
  FunnelClassicComponents.ClassicCountdown,
];

// Extracts purchase options and other data
const productFunnelData = isComponentFound(
  FunnelClassicComponents.ClassicProductFunnel,
);
const isFormFieldsDataFound = isComponentFound(
  FunnelClassicComponents.ClassicFormFields,
);
const isRatingFound = isComponentFound(FunnelClassicComponents.ClassicRates);
const isOrderConfirmationNoticeFound = isComponentFound(
  FunnelClassicComponents.ClassicOrderConfirmationNotice,
);

const purchaseOptions = productFunnelData.isComponentFound
  ? productFunnelData.componentData?.purchase_options
  : undefined;
const formFieldsData = isFormFieldsDataFound.isComponentFound
  ? isFormFieldsDataFound.componentData
  : undefined;
const ratingData = isRatingFound.isComponentFound
  ? isRatingFound.componentData
  : undefined;

const orderConfirmationNoticeData =
  isOrderConfirmationNoticeFound.isComponentFound
    ? isOrderConfirmationNoticeFound.componentData
    : undefined;
---

<main class="lg:container w-11/12 mx-auto flex flex-col gap-7 pb-5">
  {
    RENDER_ORDER.map((componentName) => {
      if (componentName === FunnelClassicComponents.ClassicHeader) {
        const headerData = isComponentFound(
          FunnelClassicComponents.ClassicHeader,
        );
        return headerData.isComponentFound ? (
          <ClassicThemeHeader data={headerData.componentData} />
        ) : null;
      }

      if (componentName === FunnelClassicComponents.ClassicProductFunnel) {
        return (
          <ClassicThemeProduct
            formFieldsData={formFieldsData}
            ratingData={ratingData}
            orderConfirmationNoticeData={orderConfirmationNoticeData}
            product={funnelPage.product}
            purchaseOptions={purchaseOptions}
          />
        );
      }

      if (componentName === FunnelClassicComponents.ClassicCountdown) {
        const countdownData = isComponentFound(
          FunnelClassicComponents.ClassicCountdown,
        );
        return countdownData.isComponentFound ? (
          <ClassicThemeCountDown data={countdownData.componentData} />
        ) : null;
      }

      if (componentName === FunnelClassicComponents.ClassicFaq) {
        const faqData = isComponentFound(FunnelClassicComponents.ClassicFaq);
        return faqData.isComponentFound ? (
          <ClassicFaq data={faqData.componentData} />
        ) : null;
      }

      if (
        componentName === FunnelClassicComponents.ClassicProductPreview
      ) {
        const productPreviewData = isComponentFound(
          FunnelClassicComponents.ClassicProductPreview,
        );
        return productPreviewData.isComponentFound ? (
          <ClassicProductPreviewComponent
            data={productPreviewData.componentData}
          />
        ) : null;
      }

      if (componentName === FunnelClassicComponents.ClassicDeliveryFeatures) {
        const deliveryFeaturesData = isComponentFound(
          FunnelClassicComponents.ClassicDeliveryFeatures,
        );
        return deliveryFeaturesData.isComponentFound ? (
          <ClassicDeliveryFeatures data={deliveryFeaturesData.componentData} />
        ) : null;
      }

      if (componentName === FunnelClassicComponents.ClassicProductUsage) {
        const productUsageData = isComponentFound(
          FunnelClassicComponents.ClassicProductUsage,
        );
        return productUsageData.isComponentFound ? (
          <ClassicProductUsage data={productUsageData.componentData} />
        ) : null;
      }

      return null;
    })
  }
</main>

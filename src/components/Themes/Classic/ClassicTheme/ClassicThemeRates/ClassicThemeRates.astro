---
import "./ClassicThemeRates.css";
import type { BlockData } from '../../../../../lib/api/types';
import { getTranslation } from '../../../../../lib/utils/i18n/translations';
import { FunnelClassicComponents } from "../../../../../lib/constants/themes";

const ratingData: BlockData = Astro.props.ratingData;

// Function to generate stars based on rating
function generateStars(rating: number) {
  const stars = [];
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 !== 0;
  const emptyStars = 5 - Math.ceil(rating);

  // Add full stars
  for (let i = 0; i < fullStars; i++) {
    stars.push({ type: 'full', key: `full-${i}` });
  }

  // Add half star if needed
  if (hasHalfStar) {
    stars.push({ type: 'half', key: 'half' });
  }

  // Add empty stars
  for (let i = 0; i < emptyStars; i++) {
    stars.push({ type: 'empty', key: `empty-${i}` });
  }

  return stars;
}
console.log(ratingData);
const rating = Array.isArray(ratingData?.items) && ratingData.items.length > 0
  ? parseFloat(ratingData.items[0].content ?? "0")
  : 0;

const stars = generateStars(rating);
---

 <div id={FunnelClassicComponents.ClassicRates} class="classic-rates">
  <div class="classic-rating-display">
    {stars.map((star) => (
      star.type === 'full' ? (
        <i class="fa-solid fa-star classic-rating-star-full"></i>
      ) : star.type === 'half' ? (
        <i class="fa-solid fa-star-half-stroke classic-rating-star-half"></i>
      ) : (
        <i class="fa-regular fa-star classic-rating-star-empty"></i>
      )
    ))}
    <span class="classic-rating-number">({rating})</span>
  </div>
</div> 

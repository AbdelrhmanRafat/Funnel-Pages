---
// Keep CSS import
import "./ClassicModalPurchaseInfo.css";
// ClassicConfirmPurchaseButton is an Astro component. It will be handled during its own conversion step.
// For now, the React component will render a placeholder for its UI part.
// import ClassicConfirmPurchaseButton from "../UI/ClassicConfirmPurchaseButton/ClassicConfirmPurchaseButton.astro";
import type { BlockData, Product } from "../../../../../lib/api/types"; // Product might not be needed directly by this Astro file anymore
import type { Language } from "../../../../../lib/utils/i18n/translations";

// Import the new React component
import ClassicModalPurchaseInfoReact from "./ClassicModalPurchaseInfoReact.tsx";

// Props that were originally in the Astro file's frontmatter
const isHaveVariant: string = Astro.props.isHaveVariant;
const purchaseOptions: BlockData = Astro.props.purchaseOptions; // Used to determine hasBundles

// Get initial language from cookie during SSR
const currentLang: Language = (Astro.cookies.get("lang")?.value || "en") as Language;
const isArabic = currentLang === "ar";

// Determine product option scenarios
const hasVariants = isHaveVariant === "true";
const hasBundles = purchaseOptions !== undefined; // Simplified from original

// Prepare props for the React component
const reactComponentProps = {
  isArabic,
  currentLang,
  hasVariants,
  hasBundles,
  // For now, pass placeholder/empty data for dynamic content.
  // User will integrate actual data loading later.
  purchaseInfoData: {
    orderTitle: hasBundles ? "Bundle Deal" : "Direct Purchase",
    itemsCount: hasBundles ? "Multiple" : "1",
    pricePerItem: hasBundles ? "Varies" : purchaseOptions?.products?.[0]?.price_after_discount?.toString() || "N/A",
    discountInfo: "See details",
    finalTotal: "Calculated at checkout",
    totalQuantity: "1",
    subtotal: "N/A",
    totalDiscount: "N/A",
    summaryFinalTotal: "N/A",
  },
  customerInfoData: {
    name: "John Doe (Sample)",
    phone: "123-456-7890 (Sample)",
    email: "john.doe@example.com (Sample)",
    address: "123 Main St (Sample)",
    city: "Anytown (Sample)",
    paymentMethod: "Cash on Delivery (Sample)",
    deliveryMethod: "Standard Shipping (Sample)",
    notes: "Sample notes here.",
  },
  celebrationData: {
    orderNumber: "#DEMO123",
  },
  bundleCustomOptions: hasVariants && hasBundles ? [{ panelIndex: 1, firstOption: "Sample Option 1", secondOption: "Sample Option 2"}] : [],
  directPurchaseItemsHTML: !hasBundles ? "<p>Sample direct purchase item details here.</p>" : ""
};
---

{/*
  The <classic-purchase-modal> custom element is removed.
  The React component will render the entire modal structure.
  The `client:visible` directive ensures the React component is hydrated.
*/}
<ClassicModalPurchaseInfoReact {...reactComponentProps} client:visible />

{/*
  The <script> import for "./ClassicModalPurchaseInfo.ts" is removed.
  The .ts file (ClassicModalPurchaseInfo.ts) will be deleted in the next step.
*/}
---
import type { CustomOptions, OptionOption, Product, VariantOption } from "../../../../../../lib/api/types";
import { getTranslation } from "../../../../../../lib/utils/i18n/translations";
import "./ClassicDynamicPannelContainer.css"

const product : Product = Astro.props.product;
const panelIndex: number = Astro.props["panel-index"] || 1;
const isHaveVariant  = product.is_have_variant;
const customOptions : CustomOptions = product.custom_options;

// Component configuration
const allowMultipleSelection = Astro.props.allowMultipleSelection ?? false;
const showSelectionIndicators = Astro.props.showSelectionIndicators ?? true;
const enableAutoSelect = Astro.props.enableAutoSelect ?? false;

// ðŸ†• Generic dynamic option handling
let optionGroups: any[] = [];
let optionAssociations: Map<string, Map<string, any[]>> = new Map();
let variantAssociations: any = null;
const sku_ID_No_Variant = product.sku_code;

if (isHaveVariant === "true" && customOptions) {
    console.log("Processing dynamic options:", customOptions);
    
    // ðŸ†• Extract all option groups dynamically
    Object.entries(customOptions).forEach(([key, options]) => {
        if (Array.isArray(options)) {
            // Check if options have color values
            const hasColors = options.some(option => 
                option.hex && option.hex.trim() !== '' && option.hex !== null
            );
            
            // Get all related option keys
            const relatedKeys = new Set<string>();
            options.forEach(option => {
                if (option.available_options) {
                    Object.keys(option.available_options).forEach(relatedKey => {
                        relatedKeys.add(relatedKey);
                    });
                }
            });
            
            optionGroups.push({
                key,
                label: key,
                options,
                hasColors,
                relatedKeys: Array.from(relatedKeys)
            });
        }
    });
    
    // ðŸ†• Build generic associations between any option types
    optionGroups.forEach(group => {
        const groupAssociations = new Map<string, any[]>();
        
        group.options.forEach(option => {
            // For each related option type, collect available values with sku_ids
            group.relatedKeys.forEach(relatedKey => {
                const relatedOptions = option.available_options?.[relatedKey];
                if (relatedOptions && Array.isArray(relatedOptions)) {
                    const relatedDetails = relatedOptions.map(rel => ({
                        value: rel.value,
                        sku_id: rel.sku_id
                    }));
                    
                    // Create association key: primaryValue -> relatedKey
                    const associationKey = `${option.value}::${relatedKey}`;
                    groupAssociations.set(associationKey, relatedDetails);
                }
            });
        });
        
        optionAssociations.set(group.key, groupAssociations);
    });
    
    // ðŸ†• Create generic variant associations for web component
    variantAssociations = {
        optionGroups: optionGroups.map(group => ({
            key: group.key,
            label: group.label,
            hasColors: group.hasColors,
            values: group.options.map(opt => opt.value),
            relatedKeys: group.relatedKeys
        })),
        associations: Object.fromEntries(
            Array.from(optionAssociations.entries()).map(([groupKey, associations]) => [
                groupKey,
                Object.fromEntries(associations)
            ])
        )
    };
    
    console.log("Generic variant associations:", variantAssociations);
}

---
<div id="classic-pannel-container" class="classic-pannel-container">
  <classic-select-options 
    data-options-panel-index={panelIndex}
    data-options-allow-multiple={allowMultipleSelection}
    data-options-show-indicators={showSelectionIndicators}
    data-options-auto-select={enableAutoSelect}
    data-options-is-variant={isHaveVariant}
    data-variant-associations={variantAssociations ? JSON.stringify(variantAssociations) : ''}
    data-sku-no-variant={sku_ID_No_Variant}
  >
    <div class="option-panel classic-option-panel p-4 rounded-xl sm:rounded-3xl border">
      <!-- Updated Header with Selection Indicators -->
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-0">
        <div class="classic-panel-header font-bold text-lg sm:text-xl">
          <p class="inline" data-translate="dynamicPanel.selectOptionsForProduct">
            Select Options for Product
          </p>
          <span data-options-panel-index-display>{panelIndex}</span>
        </div>
        {showSelectionIndicators && optionGroups.length > 0 && (
          <div class="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
            {optionGroups.map((group, index) => (
              <div class="classic-selection-indicator flex items-center gap-1 justify-center sm:justify-start py-1 px-3 rounded-full text-xs sm:text-sm">
                <span>{group.label}</span>
                <span data-options-selected={`group-${index}`}></span>
              </div>
            ))}
          </div>
        )}
      </div>
      
      <div class="py-2 md:py-1 flex flex-col justify-center md:justify-between items-start md:items-start md:flex-row gap-6">
        {/* ðŸ†• Generic Dynamic Option Rendering */}
        {optionGroups.map((group, groupIndex) => (
          <div class="select-option-section space-y-2" key={group.key}>
            <p class="classic-selection-title text-base sm:text-lg font-semibold">
              {group.label}
            </p>
            
            {/* ðŸ†• Conditional rendering based on hasColors */}
            {group.hasColors ? (
              /* Options with color swatches */
              <div class="flex flex-wrap justify-start content-center gap-2">
                {group.options.map((option, index) => (
                  <div
                    class="classic-color-option w-24 flex flex-col items-center gap-1 cursor-pointer hover:scale-105 transition-transform"
                    data-options-option
                    data-options-option-value={option.value}
                    data-options-option-hex={option.hex}
                    data-options-option-index={index}
                    data-options-group-key={group.key}
                    data-options-group-index={groupIndex}
                    data-variant={true}
                  >
                    <div
                      class="classic-color-swatch w-8 h-8 sm:w-9 sm:h-9 rounded-full border-2"
                      style={`background-color: ${option.hex}`}
                    ></div>
                    <span class="classic-color-name text-xs sm:text-sm text-center">{option.value}</span>
                  </div>
                ))}
              </div>
            ) : (
              /* Text-only options */
              <div class="grid grid-cols-3 sm:flex gap-2 sm:gap-4">
                {group.options.map((option, index) => (
                  <div
                    class="size-option classic-size-option py-2 px-3 sm:py-2.5 sm:px-5 border rounded-lg sm:rounded-xl cursor-pointer text-xs sm:text-sm font-medium text-center"
                    data-options-option
                    data-options-option-value={option.value}
                    data-options-option-index={index}
                    data-options-group-key={group.key}
                    data-options-group-index={groupIndex}
                    data-variant={true}
                  >
                    {option.value}
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
        
        {/* Fallback for non-variant products */}
        {!isHaveVariant && (
          <div class="select-option-section space-y-2">
            <p class="classic-selection-title text-base sm:text-lg font-semibold">
              Single Product
            </p>
            <div class="py-2 px-4 border rounded-lg bg-gray-50">
              <span class="text-sm">SKU: {sku_ID_No_Variant}</span>
            </div>
          </div>
        )}
      </div>
      
    </div>
  </classic-select-options>
</div>

<script>
  import "./ClassicDynamicPannelContainer";
</script>
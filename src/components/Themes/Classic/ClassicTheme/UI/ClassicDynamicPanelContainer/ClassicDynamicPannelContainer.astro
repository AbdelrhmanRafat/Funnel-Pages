---
import type { ColorOption, CustomOptions, OptionOption, Product, SizeOption } from "../../../../../../lib/api/types";
import { getTranslation } from "../../../../../../lib/utils/i18n/translations";
import "./ClassicDynamicPannelContainer.css"

const product : Product = Astro.props.product;
const panelIndex: number = Astro.props["panel-index"] || 1;
const colorSizeOptions: OptionOption[] = product.options[0].options;
const isHaveVariant  = product.is_have_variant;
const customOptions : CustomOptions = product.custom_options;

// Component configuration
const allowMultipleSelection = Astro.props.allowMultipleSelection ?? false;
const showSelectionIndicators = Astro.props.showSelectionIndicators ?? true;
const enableAutoSelect = Astro.props.enableAutoSelect ?? false; // Auto-select first option

let colors: OptionOption | undefined | ColorOption[] = undefined;
let sizes: OptionOption | undefined | SizeOption[] = undefined;
if (isHaveVariant === "true" && customOptions) {
    colors = customOptions.color;
    sizes = customOptions.size;
} else {
    colors = colorSizeOptions.find(opt => opt.name === 'color');
    sizes = colorSizeOptions.find(opt => opt.name === 'size');
}

---
<div id="classic-pannel-container" class="classic-pannel-container">
  <classic-select-options 
    data-options-panel-index={panelIndex}
    data-options-allow-multiple={allowMultipleSelection}
    data-options-show-indicators={showSelectionIndicators}
    data-options-auto-select={enableAutoSelect}
  >
    <div class="option-panel classic-option-panel p-4 rounded-xl sm:rounded-3xl border">
      <!-- Updated Header with Selection Indicators -->
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-0">
        <div class="classic-panel-header font-bold text-lg sm:text-xl">
          <p class="inline" data-translate="dynamicPanel.selectOptionsForProduct">
          </p>
          <span data-options-panel-index-display>{panelIndex}</span>
        </div>
        {showSelectionIndicators && (
          <div class="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
            {colors && (
              <div class="classic-selection-indicator flex items-center gap-1 justify-center sm:justify-start py-1 px-3 rounded-full text-xs sm:text-sm">
                <span data-translate="dynamicPanel.color">{getTranslation('dynamicPanel.color')}</span>
                <span data-options-selected-color></span>
              </div>
            )}
            {sizes && (
              <div class="classic-selection-indicator flex items-center gap-1 justify-center sm:justify-start py-1 px-3 rounded-full text-xs sm:text-sm">
                <span data-translate="dynamicPanel.size">{getTranslation('dynamicPanel.size')}</span>
                <span data-options-selected-size></span>
              </div>
            )}
          </div>
        )}
      </div>
      
      <div class="py-2 md:py-1 flex flex-col justify-center md:justify-between items-start md:items-start md:flex-row">
        <!-- Size Selection -->
        {sizes && (
          <div class="select-size-section space-y-2">
            <p class="classic-selection-title text-base sm:text-lg font-semibold" data-translate="dynamicPanel.size">{getTranslation('dynamicPanel.size')}</p>
            <div class="grid grid-cols-3 sm:flex gap-2 sm:gap-4">
              {
                /* Handle variant sizes (SizeOption[] - direct array) */
                (isHaveVariant && Array.isArray(sizes)) ? 
                  sizes.map((size, index) => (
                    <div
                      class="size-option classic-size-option py-2 px-3 sm:py-2.5 sm:px-5 border rounded-lg sm:rounded-xl cursor-pointer text-xs sm:text-sm font-medium text-center"
                      data-options-size-option
                      data-options-size-value={size.value}
                      data-options-size-index={index}
                      data-variant={true}
                    >
                      {size.value}
                    </div>
                  )) :
                /* Handle non-variant sizes (OptionOption with Value[] array) */
                (sizes && 'value' in sizes && Array.isArray(sizes.value)) ?
                  sizes.value.map((size, index) => (
                    <div
                      class="size-option classic-size-option py-2 px-3 sm:py-2.5 sm:px-5 border rounded-lg sm:rounded-xl cursor-pointer text-xs sm:text-sm font-medium text-center"
                      data-options-size-option
                      data-options-size-value={size.value || size.name}
                      data-options-size-index={index}
                      data-variant={false}
                    >
                      {size.display || size.value || size.name}
                    </div>
                  )) : null
              }
            </div>
          </div>
        )}
               
        <!-- Color Selection -->
        {colors && (
          <div class="select-color-section space-y-2">
            <p class="classic-selection-title text-base sm:text-lg font-semibold" data-translate="dynamicPanel.color">{getTranslation('dynamicPanel.color')}</p>
            <div class="flex flex-wrap justify-start content-center gap-2">
              {
                /* Handle variant colors (ColorOption[] - direct array) */
                (isHaveVariant && Array.isArray(colors)) ? 
                  colors.map((color, index) => (
                    <div
                      class="classic-color-option w-24 flex flex-col items-center gap-1 cursor-pointer hover:scale-105 transition-transform"
                      data-options-color-option
                      data-options-color-name={color.value}
                      data-options-color-hex={color.hex}
                      data-options-color-index={index}
                      data-variant={true}
                    >
                      <div
                        class="classic-color-swatch w-8 h-8 sm:w-9 sm:h-9 rounded-full border-2"
                        style={`background-color: ${color.hex}`}
                      ></div>
                      <span class="classic-color-name text-xs sm:text-sm text-center">{color.value}</span>
                    </div>
                  )) :
                /* Handle non-variant colors (OptionOption with Value[] array) */
                (colors && 'value' in colors && Array.isArray(colors.value)) ?
                  colors.value.map((color, index) => (
                    <div
                      class="color-option flex flex-col items-center gap-1 cursor-pointer hover:scale-105 transition-transform"
                      data-options-color-option
                      data-options-color-name={color.name || color.value}
                      data-options-color-hex={color.hex}
                      data-options-color-index={index}
                      data-variant={false}
                    >
                      <div
                        class="classic-color-swatch w-8 h-8 sm:w-9 sm:h-9 rounded-full border-2"
                        style={`background-color: ${color.hex}`}
                      ></div>
                      <span class="classic-color-name text-xs sm:text-sm text-center">{color.name || color.value}</span>
                    </div>
                  )) : null
              }
            </div>
          </div>
        )}
      </div>
      
    </div>
  </classic-select-options>
</div>

<script>
  import "./ClassicDynamicPannelContainer";
</script>
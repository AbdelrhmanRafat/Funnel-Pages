---
import type { BlockData } from "../../../../../../lib/api/types";

const data: BlockData[] = Astro.props.data;
const name = "qty";
console.log("Quantity Options:", data);
---
  <h3 class="text-xl font-bold text-gray-900 mb-4 flex items-center gap-2">
    <span class="text-2xl">🛍️</span>
    اختر الكمية المناسبة
  </h3>
<div class="space-y-3">
  {data.map((item, index) => (
    <label 
      class={`quantity-card group block relative overflow-hidden rounded-2xl border-2 cursor-pointer transition-all duration-300 hover:shadow-lg hover:scale-[1.02] ${
        index === 0 
          ? 'border-blue-500 bg-blue-50 shadow-md' 
          : 'border-gray-200 bg-white hover:border-blue-300'
      }`}
      for={`${name}${index + 1}`}
    >
      <input 
        type="radio" 
        id={`${name}${index + 1}`} 
        name={name} 
        class="hidden" 
        checked={index === 0} 
      />
      
      {/* Popular Badge for Best Deal */}
      {item.discount_percent !== '0%' && item.items === 2 && (
        <div class="absolute top-0 right-0 bg-gradient-to-r from-orange-400 to-orange-500 text-white text-xs font-bold px-3 py-1 rounded-bl-lg rounded-tr-2xl">
          الأكثر شعبية
        </div>
      )}

      {/* Best Value Badge for Highest Discount */}
      {item.discount_percent === '35%' && (
        <div class="absolute top-0 right-0 bg-gradient-to-r from-green-500 to-green-600 text-white text-xs font-bold px-3 py-1 rounded-bl-lg rounded-tr-2xl">
          أفضل قيمة
        </div>
      )}

      <div class="p-5">
        <div class="flex justify-between items-start mb-3">
          <div class="flex-1">
            <h3 class="font-bold text-lg text-gray-900 mb-1">{item.title}</h3>
            <div class="flex items-center gap-2 text-sm text-gray-600">
              <span class="bg-gray-100 px-2 py-1 rounded-full">
                {item.items} {item.items === 1 ? 'قطعة' : 'قطع'}
              </span>
              <span>•</span>
              <span>{item.price_per_item.toLocaleString()} ج.م لكل قطعة</span>
            </div>
          </div>
          
          <div class="text-right">
            <div class={`text-2xl font-bold mb-1 ${
              item.discount > 0 ? 'text-green-600' : 'text-blue-600'
            }`}>
              {item.final_total.toLocaleString()} ج.م
            </div>
            {item.discount > 0 && (
              <div class="flex flex-col items-end">
                <div class="text-sm text-gray-500 line-through">
                  {item.original_total.toLocaleString()} ج.م
                </div>
                <div class="inline-flex items-center bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded-full">
                  <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                  </svg>
                  وفّر {item.discount.toLocaleString()} ج.م ({item.discount_percent})
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Price Breakdown */}
        <div class="border-t border-gray-100 pt-3 mt-3">
          <div class="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span class="text-gray-600">إجمالي المنتجات:</span>
              <span class="font-semibold text-gray-900 mr-2">
                {item.total_price.toLocaleString()} ج.م
              </span>
            </div>
            <div>
              <span class="text-gray-600">الشحن:</span>
              <span class="font-semibold text-gray-900 mr-2">
                {item.shipping_price.toLocaleString()} ج.م
              </span>
            </div>
          </div>
        </div>

        {/* Selection Indicator */}
        <div class={`absolute left-4 top-4 w-5 h-5 rounded-full border-2 transition-all duration-200 ${
          index === 0 
            ? 'border-blue-500 bg-blue-500' 
            : 'border-gray-300 group-hover:border-blue-400'
        }`}>
          {index === 0 && (
            <div class="w-2 h-2 bg-white rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></div>
          )}
        </div>
      </div>
    </label>
  ))}
</div>

<style>
  .quantity-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .quantity-card:hover {
    transform: translateY(-2px);
  }
  
  .quantity-card input:checked + div {
    background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
  }
  
  .quantity-card input:checked ~ * {
    border-color: #3b82f6;
  }

  /* RTL Support */
  [dir="rtl"] .quantity-card {
    text-align: right;
  }
  
  [dir="rtl"] .absolute.left-4 {
    left: auto;
    right: 1rem;
  }
</style>

<script>
  // Enhanced radio button selection with smooth animations
  document.addEventListener('DOMContentLoaded', function() {
    const radioInputs = document.querySelectorAll('input[name="qty"]');
    const cards = document.querySelectorAll('.quantity-card');
    
    radioInputs.forEach((radio, index) => {
      radio.addEventListener('change', function() {
        // Remove selected state from all cards
        cards.forEach(card => {
          card.classList.remove('border-blue-500', 'bg-blue-50', 'shadow-md');
          card.classList.add('border-gray-200', 'bg-white');
          
          // Reset radio indicator
          const indicator = card.querySelector('.absolute.left-4, .absolute.right-4');
          if (indicator) {
            indicator.classList.remove('border-blue-500', 'bg-blue-500');
            indicator.classList.add('border-gray-300');
            indicator.innerHTML = '';
          }
        });
        
        // Add selected state to current card
        if (this.checked) {
          const currentCard = cards[index];
          currentCard.classList.remove('border-gray-200', 'bg-white');
          currentCard.classList.add('border-blue-500', 'bg-blue-50', 'shadow-md');
          
          // Update radio indicator
          const indicator = currentCard.querySelector('.absolute.left-4, .absolute.right-4');
          if (indicator) {
            indicator.classList.remove('border-gray-300');
            indicator.classList.add('border-blue-500', 'bg-blue-500');
            indicator.innerHTML = '<div class="w-2 h-2 bg-white rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></div>';
          }
        }
      });
    });
  });
</script>
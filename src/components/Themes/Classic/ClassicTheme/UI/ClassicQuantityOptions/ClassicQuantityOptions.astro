---
import type { BlockData, OptionOption } from "../../../../../../lib/api/types";
import { getTranslation } from "../../../../../../lib/utils/i18n/translations";
import ClassicDynamicPannelContainer from "../ClassicDynamicPanelContainer/ClassicDynamicPannelContainer.astro";

const data: BlockData[] = Astro.props.data;
const colorSizeOptions: OptionOption[] = Astro.props.colorSizeOptions;
const name = "qty";
---

<div id="classic-quantity-selection">
<h3 class="text-xl font-bold text-gray-900 mb-4 flex items-center gap-2" data-translate="quantityOptions.chooseQuantity">
  {getTranslation('quantityOptions.chooseQuantity')}
</h3>

<div class="space-y-3">
  {
    data.map((item, index) => (
      <div class="quantity-option-group">
        <div class="border border-blue-500 rounded-3xl p-2">
        <label
          class="group block relative overflow-hidden cursor-pointer transition-all duration-300 hover:shadow-lg rounded-2xl has-[:checked]:border-blue-500 has-[:checked]:bg-blue-50 has-[:checked]:shadow-md  bg-white"
          for={`${name}${index + 1}`}
        >
          <input
            type="radio"
            id={`${name}${index + 1}`}
            name={name}
            class="hidden"
            checked={index === 0}
            selected-item = {JSON.stringify(item)}
            data-items={item.items} 
          />
          <div class="p-2 md:p-3">
            <div class="flex flex-col sm:flex-row sm:justify-between sm:items-start mb-3 space-y-2 sm:space-y-0">
              <div class="flex-1">
                <h3 class="font-bold text-base sm:text-lg text-gray-900 mb-1">{item.title}</h3>
                <div class="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-2 text-xs sm:text-sm text-gray-600">
                  <div class="bg-gray-100 px-2 py-1 rounded-full inline-block w-fit">
                    <span>{item.items === 1 ? "" : item.items}</span>
                    <span data-translate={"quantityOptions.itemUnit.singular"}>
                    </span>
                  </div>
                  <span class="hidden sm:inline">â€¢</span>
                  <div class="text-xs sm:text-sm flex justify-start gap-1">
                    <span>{item.price_per_item}</span>
                    <span data-translate="productFunnel.currency"></span>
                    <span data-translate='quantityOptions.pricePerItem'></span>
                  </div>
                </div>
              </div>

              <div class="text-left sm:text-right mt-2 sm:mt-0">
                <div
                  class={`text-xl sm:text-2xl font-bold mb-1 ${
                    item.discount > 0 ? "text-green-600" : "text-blue-600"
                  }`}
                >
                  {item.final_total.toLocaleString()} {getTranslation('productFunnel.currency')}
                </div>
                {item.discount > 0 && (
                  <div class="flex flex-col items-start sm:items-end">
                    <div class="text-xs sm:text-sm text-gray-500 line-through">
                      {item.original_total.toLocaleString()} {getTranslation('productFunnel.currency')}
                    </div>
                    <div class="inline-flex items-center bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded-full mt-1">
                      <svg
                        class="w-3 h-3 ml-1"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      <span class="ml-1">
                        {getTranslation('quantityOptions.saveDiscount').replace('{discountAmount}', item.discount.toLocaleString() + " " + getTranslation('productFunnel.currency')).replace('{discountPercent}', item.discount_percent)}
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </label>
        <div class={`repeated-elements ${index === 0 ? '' : 'hidden'}`} data-option-id={`${name}${index + 1}`}>
          {
            [...Array(item.items)].map((_, panelIndex) => (
              <ClassicDynamicPannelContainer 
                key={panelIndex}
                colorSizeOptions={colorSizeOptions}
                panel-index={panelIndex + 1}
              />
            ))
          }
        </div>
      </div>
    </div>
    ))
  }
</div>
</div>

<script>
  import "./ClassicQuantityOptions"
</script>
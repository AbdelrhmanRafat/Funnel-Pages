---
import "./ClassicBundleOptionsContainer.css";
import type { CustomOptions, Product } from "../../../../../../lib/api/types";
import { detectColorOption } from "../../../../../../lib/utils/Custom-Options-utils";
import { getTranslation, type Language } from "../../../../../../lib/utils/i18n/translations"; // Import Language

// Import the new React component and its types
import ClassicBundleOptionsContainerReact, {
  type ProcessedOptionData,
  type OptionDetail,
  type OptionValue
} from "./ClassicBundleOptionsContainerReact.tsx";

const product: Product = Astro.props.product;
const panelIndex: number = Astro.props["panel-index"] || 1;
const isHaveVariantStr = product.is_have_variant; // Keep as string from product
const isHaveVariantBool : boolean = isHaveVariantStr === "true"; // Convert to boolean for React prop

const customOptions: CustomOptions = product.custom_options;
const nOfOptions: number = customOptions ? Object.keys(customOptions).length : 0;

// Component configuration (remains the same, passed to React if needed or used by React directly)
const showSelectionIndicators = true;

// Data extraction logic (remains in Astro frontmatter)
let processedOptionData: ProcessedOptionData | null = null;
const skuNoVariant = product.sku_code;

if (isHaveVariantBool && customOptions) {
  const optionEntries = Object.entries(customOptions);

  const firstOptionEntry = optionEntries[0];
  const firstOptionAstro: OptionDetail | null = firstOptionEntry
    ? {
        key: firstOptionEntry[0],
        title: firstOptionEntry[0], // Title might need to be more user-friendly
        values: firstOptionEntry[1] as OptionValue[], // Cast as OptionValue[]
        hasColors: false, // Placeholder, will be updated by detectColorOption
      }
    : null;

  const secondOptionEntry = optionEntries[1];
  const secondOptionAstro: OptionDetail | null = secondOptionEntry
    ? {
        key: secondOptionEntry[0],
        title: secondOptionEntry[0], // Title might need to be more user-friendly
        values: secondOptionEntry[1] as OptionValue[], // Cast as OptionValue[]
        hasColors: false, // Placeholder
      }
    : null;

  const colorDetection = detectColorOption(firstOptionAstro, secondOptionAstro);
  if (firstOptionAstro) firstOptionAstro.hasColors = colorDetection.firstHasColors;
  if (secondOptionAstro) secondOptionAstro.hasColors = colorDetection.secondHasColors;

  const associations: { [firstValue: string]: Array<{value: string, sku_id?: number, hex?: string, image?: string}> } = {};
  if (firstOptionAstro && secondOptionAstro) {
    firstOptionAstro.values.forEach((firstValueObj: OptionValue) => {
      const firstVal = firstValueObj.value;
      // Ensure available_options and the specific key exist
      if (firstValueObj.available_options && firstValueObj.available_options[secondOptionAstro.key]) {
        const availableSecondOptions = firstValueObj.available_options[secondOptionAstro.key];
        if (availableSecondOptions && Array.isArray(availableSecondOptions)) {
          associations[firstVal] = availableSecondOptions.map((item: any) => ({ // item is any here due to direct access
            value: item.value,
            sku_id: item.sku_id,
            hex: item.hex,
            image: item.image,
          }));
        }
      }
    });
  }

  processedOptionData = {
    firstOption: firstOptionAstro,
    secondOption: secondOptionAstro,
    associations,
  };
}

// Get current language for translations
const currentLang: Language = (Astro.cookies.get("lang")?.value || "en") as Language;

// Prepare props for the React component
const reactComponentProps = {
  panelIndex,
  isHaveVariant: isHaveVariantBool,
  optionData: processedOptionData,
  skuNoVariant: skuNoVariant || undefined, // Pass undefined if null/empty for cleaner prop handling
  nOfOptions,
  showSelectionIndicators,
  currentLang,
  getTranslation,
  selectedFirstOptionValue: undefined, // No selection by default
  selectedSecondOptionValue: undefined,
};
---

{/*
  The <classic-select-options-bundles> custom element is removed.
  The React component ClassicBundleOptionsContainerReact will render the UI.
*/}
<div id={`classic-bundle-options-container-${panelIndex}`} class="classic-bundle-options-container">
  <ClassicBundleOptionsContainerReact {...reactComponentProps} client:visible />
</div>

{/*
  The <script> import for "./ClassicBundleOptionsContainer.ts" is removed.
  The .ts file (ClassicBundleOptionsContainer.ts) will be deleted.
*/}
---
import "./classicSelectionOptionsWithoutBundles.css";
import type { CustomOptions, Product } from "../../../../../../lib/api/types";
import { detectColorOption } from "../../../../../../lib/utils/Custom-Options-utils";
import { getTranslation } from "../../../../../../lib/utils/i18n/translations";
import ClassicColorOptionsWithoutBundles from "./Color Options/ClassicColorOptionsWithoutBundles.astro";
import ClassicTextOptionsWithoutBundles from "./Text Options/ClassicTextOptionsWithoutBundles.astro";
const product: Product = Astro.props.product;
const panelIndex: number = 1;
const isHaveVariant = product.is_have_variant;
const customOptions: CustomOptions[] = product.custom_options;

// Component configuration
const allowMultipleSelection = false;
const showSelectionIndicators =  true;
const enableAutoSelect =  false;

// ðŸ†• Clean data extraction
let optionData: any = null;
const skuNoVariant = product.sku_code;

if (isHaveVariant === "true" && customOptions) {
    // Extract options in original JSON order
    const optionEntries = Object.entries(customOptions);
    
    const firstOption = optionEntries[0] ? {
        key: optionEntries[0][0],
        title: optionEntries[0][0],
        values: optionEntries[0][1]
    } : null;
    
    const secondOption = optionEntries[1] ? {
        key: optionEntries[1][0], 
        title: optionEntries[1][0],
        values: optionEntries[1][1]
    } : null;
    
    // ðŸ†• Detect which option should show colors
    const colorDetection = detectColorOption(firstOption, secondOption);
    
    // ðŸ†• Build associations for filtering (first â†’ second only)
    const associations: any = {};
    if (firstOption && secondOption) {
        firstOption.values.forEach(firstValue => {
            const availableSecondOptions = firstValue.available_options?.[secondOption.key];
            if (availableSecondOptions && Array.isArray(availableSecondOptions)) {
                associations[firstValue.value] = availableSecondOptions.map(item => ({
                    value: item.value,
                    ...item
                }));
            }
        });
    }
    
    // ðŸ†• Create clean data structure
    optionData = {
        firstOption: firstOption ? {
            ...firstOption,
            hasColors: colorDetection.firstHasColors
        } : null,
        secondOption: secondOption ? {
            ...secondOption, 
            hasColors: colorDetection.secondHasColors
        } : null,
        associations // firstOption.value â†’ secondOption items with sku_id
    };
    
}
---
<div id="classic-pannel-container" class="classic-pannel-container">
  <classic-select-options 
    data-options-panel-index={panelIndex}
    data-options-allow-multiple={allowMultipleSelection}
    data-options-show-indicators={showSelectionIndicators}
    data-options-auto-select={enableAutoSelect}
    data-options-is-variant={isHaveVariant}
    data-option-data={optionData ? JSON.stringify(optionData) : ''}
    data-sku-no-variant={skuNoVariant}
  >
    <div class="classic-single-option-panel p-7">
      
      <div class="py-2 md:py-1 flex flex-col justify-start items-start gap-8">
        
        {/* First Option Rendering */}
        {optionData?.firstOption && (
          <div class="classic-select-option-section">
            {optionData.firstOption.hasColors ? (
              /* Color options with swatches */
              <div class="flex flex-wrap justify-start content-start gap-7">
                {optionData.firstOption.values.map((option, index) => (
                  <ClassicColorOptionsWithoutBundles 
                  option={option}
                  index={index}
                  optionType="first"
                  />
                ))}
              </div>
            ) : (
              /* Text-only options */
              <div class="grid grid-cols-3 sm:flex gap-2 sm:gap-4">
                {optionData.firstOption.values.map((option, index) => (
                 <ClassicTextOptionsWithoutBundles 
                  option={option},
                  index={index},
                  optionType = "first"
                 />
                ))}
              </div>
            )}
          </div>
        )}
        
        {/* Second Option Rendering */}
        {optionData?.secondOption && (
          <div class="classic-select-option-section space-y-2">            
            {optionData.secondOption.hasColors ? (
              /* Color options with swatches */
              <div class="flex flex-wrap justify-start content-center gap-2">
                {optionData.secondOption.values.map((option, index) => (
              <ClassicColorOptionsWithoutBundles 
                  option={option}
                  index={index}
                  optionType="first"
                  />
                ))}
              </div>
            ) : (
              /* Text-only options */
              <div class="grid grid-cols-3 sm:flex gap-2 sm:gap-4">
                {optionData.secondOption.values.map((option, index) => (
                  <ClassicTextOptionsWithoutBundles 
                  option={option}
                  index={index}
                  optionType="second"
                  />
                ))}
              </div>
            )}
          </div>
        )}


        {/* Non-variant fallback */}
        {!isHaveVariant && (
          <div class="select-option-section space-y-2">
            <p class="classic-selection-title text-base sm:text-lg font-semibold">
              Single Product
            </p>
            <div class="py-2 px-4 border rounded-lg bg-gray-50">
              <span class="text-sm">SKU: {skuNoVariant}</span>
            </div>
          </div>
        )}
      </div>
    </div>
  </classic-select-options>
</div>

<script>
  import "./classicSelectionOptionsWithoutBundles";
</script>

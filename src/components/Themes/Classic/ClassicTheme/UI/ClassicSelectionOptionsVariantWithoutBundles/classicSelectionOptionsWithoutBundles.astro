---
// ClassicSelectionOptionsWithoutBundles.astro - Enhanced with new observer
import "./classicSelectionOptionsWithoutBundles.css";
import type { CustomOptions, Product } from "../../../../../../lib/api/types";
import { detectColorOption } from "../../../../../../lib/utils/Custom-Options-utils";
import { getTranslation, type Language } from "../../../../../../lib/utils/i18n/translations";

// Import the React component and its specific types
import ClassicSelectionOptionsWithoutBundlesReact, {
    type ProcessedOptionDataReact,
    type OptionDetailReact,
    type OptionValueReact
} from "./ClassicSelectionOptionsWithoutBundlesReact.tsx";

// These were previously imported for direct use in template, now data is passed to React
// import ClassicColorOptionsWithoutBundles from "./Color Options/ClassicColorOptionsWithoutBundles.astro";
// import ClassicTextOptionsWithoutBundles from "./Text Options/ClassicTextOptionsWithoutBundles.astro";

const product: Product = Astro.props.product;
const qty_NonVariant = product.qty;
const isHaveVariantStr = product.is_have_variant;
const isHaveVariantBool: boolean = isHaveVariantStr === "true";
const customOptions: CustomOptions = product.custom_options;

// Data extraction logic (remains in Astro frontmatter)
let processedOptionData: ProcessedOptionDataReact | null = null;
const skuNoVariant = product.sku_code;
const skus = product.skus; // Needed for single option logic

if (isHaveVariantBool && customOptions) {
    const optionEntries = Object.entries(customOptions);
    
    const firstOptionEntry = optionEntries[0];
    const firstOptionAstro: OptionDetailReact | null = firstOptionEntry ? {
        key: firstOptionEntry[0],
        title: firstOptionEntry[0], // Consider making titles more user-friendly if possible
        values: firstOptionEntry[1] as OptionValueReact[],
        hasColors: false, // Will be updated by detectColorOption
    } : null;

    const secondOptionEntry = optionEntries[1];
    const secondOptionAstro: OptionDetailReact | null = secondOptionEntry ? {
        key: secondOptionEntry[0],
        title: secondOptionEntry[0],
        values: secondOptionEntry[1] as OptionValueReact[],
        hasColors: false,
    } : null;
    
    const colorDetection = detectColorOption(firstOptionAstro as any, secondOptionAstro as any); // Cast as any for detectColorOption if its types are different
    if (firstOptionAstro) firstOptionAstro.hasColors = colorDetection.firstHasColors;
    if (secondOptionAstro) secondOptionAstro.hasColors = colorDetection.secondHasColors;

    const associations: { [firstValue: string]: Array<any> } = {};
    if (firstOptionAstro) {
        firstOptionAstro.values.forEach((firstValueItm: OptionValueReact) => {
            const firstValue = firstValueItm.value;
            if (secondOptionAstro) {
                const availableSecondOptions = (firstValueItm as any).available_options?.[secondOptionAstro.key];
                if (availableSecondOptions && Array.isArray(availableSecondOptions)) {
                    associations[firstValue] = availableSecondOptions.map(item => ({
                        value: item.value, sku_id: item.sku_id, hex: item.hex, price: item.price,
                        price_after_discount: item.price_after_discount, image: item.image, qty: item.qty, ...item
                    }));
                }
            } else if (skus) { // Handling for only one option type, using skus for details
                const matchingSku = skus.find(sku => sku.options?.some(opt => opt.value === firstValue));
                associations[firstValue] = [{
                    value: firstValue, sku_id: matchingSku?.id, hex: matchingSku?.options?.find(opt => opt.value === firstValue)?.hex,
                    price: matchingSku?.price, price_after_discount: matchingSku?.price_after_discount,
                    image: matchingSku?.image, qty: matchingSku?.qty
                }];
            }
        });
    }
    
    processedOptionData = {
        firstOption: firstOptionAstro,
        secondOption: secondOptionAstro,
        associations,
    };
}

const currentLang: Language = (Astro.cookies.get("lang")?.value || "en") as Language;

const reactProps = {
    isHaveVariant: isHaveVariantBool,
    processedOptionData,
    initialQty: 1, // Default quantity
    maxQty: isHaveVariantBool ? undefined : qty_NonVariant, // Max qty for non-variant, undefined for variant until selection
    currentQuantity: 1, // Initial display quantity
    qtyNonVariant: qty_NonVariant || 1,
    selectedFirstOptionValue: undefined, // No initial selection
    selectedSecondOptionValue: undefined,
    getTranslation: (key: string, lang?: Language, vars?: Record<string, string | number>) => getTranslation(key, lang, vars),
    currentLang,
    // onFirstOptionSelect, onSecondOptionSelect, onQuantityChange will be handled by user later
};
---

<div id="classic-selection-options-without-bundles" class="classic-selection-options-without-bundles w-full">
  {/* The <classic-select-options> custom element is removed. React component handles the UI. */}
  <ClassicSelectionOptionsWithoutBundlesReact {...reactProps} client:load />
</div>

{/*
  The <script> import for "./classicSelectionOptionsWithoutBundles.ts" is removed.
  The .ts file will be deleted.
*/}
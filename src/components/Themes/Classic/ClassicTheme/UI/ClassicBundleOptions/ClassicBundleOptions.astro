---
import "./ClassicBundleOptions.css";
import type { PurchaseOption, Product } from "../../../../../../lib/api/types";
import { getTranslation, type Language } from "../../../../../../lib/utils/i18n/translations"; // Import Language type
// ClassicBundleOptionsContainer will be replaced by its React version inside ClassicBundleOptionsReact.tsx
// import ClassicBundleOptionsContainer from "../ClassicBundleOptionsContainer/ClassicBundleOptionsContainer.astro";

import ClassicBundleOptionsReact from "./ClassicBundleOptionsReact.tsx";

const data: PurchaseOption[] = Astro.props.data;
const product : Product = Astro.props.product;
const isHaveVariant : boolean = product.is_have_variant === "true"; // Ensure boolean
const name = "qty"; // This was the name for radio group, can be passed as prop

// Get current language for translations
const currentLang: Language = (Astro.cookies.get("lang")?.value || "en") as Language;

const reactProps = {
  data,
  product,
  isHaveVariant,
  name,
  currentLang,
  getTranslation, // Pass the function itself
  initialSelectedIndex: 0, // The first option is selected by default
};
---

{/*
  The <offer-selector> custom element is removed.
  The React component will render the bundle options UI.
  client:visible ensures the React component is hydrated.
*/}
<ClassicBundleOptionsReact {...reactProps} client:visible />

{/*
  The <script> import for "./ClassicBundleOptions.ts" is removed.
  The .ts file (ClassicBundleOptions.ts) will be deleted.
*/}
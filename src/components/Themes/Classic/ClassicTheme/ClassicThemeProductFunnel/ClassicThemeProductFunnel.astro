---
import "./ClassicThemeProductFunnel.css";
import type { BlockData, OptionOption } from "../../../../../lib/api/types";

const data: BlockData[] = Astro.props.data;
const colorSizeOptions = Astro.props.colorSizeOptions;

const initialOffer = data[0];

import { getTranslation } from "../../../../../lib/utils/i18n/translations";
import ClassicQuantityOptions from "../UI/ClassicQuantityOptions/ClassicQuantityOptions.astro";
import { FunnelClassicComponents } from "../../../../../lib/constants/themes";
---
<div id={FunnelClassicComponents.ClassicProductFunnel} class="w-full flex flex-col gap-2">
<ClassicQuantityOptions data={data} colorSizeOptions={colorSizeOptions} />

<div class="classic-purchase-options">
    <div class="classic-purchase-options-body">
        <div class="classic-purchase-options-content space-y-3">
            <div class="classic-purchase-row flex justify-between items-center">
                <span class="classic-purchase-label" data-translate="productFunnel.quantity">
                    {getTranslation('productFunnel.quantity')}
                </span>
                <div>
                    <span class="classic-purchase-value" data-price-quantity></span>
                    <span data-translate="productFunnel.piece">
                        {getTranslation('productFunnel.piece')}
                    </span>
                </div>
            </div>
            
            <div class="classic-purchase-row flex justify-between items-center">
                <span class="classic-purchase-label" data-translate="productFunnel.unitPrice">
                    {getTranslation('productFunnel.unitPrice')}
                </span>
                <span class="classic-purchase-value" data-price-unit>
                    {initialOffer.price_per_item.toLocaleString()} {getTranslation('productFunnel.currency')}
                </span>
            </div>
            
            <div class="classic-purchase-row flex justify-between items-center">
                <span class="classic-purchase-label" data-translate="productFunnel.subtotal">
                    {getTranslation('productFunnel.subtotal')}
                </span>
                <span class="classic-purchase-value" data-price-subtotal>
                    {initialOffer.total_price.toLocaleString()} {getTranslation('productFunnel.currency')}
                </span>
            </div>
            
            <div class="classic-purchase-row flex justify-between items-center">
                <span class="classic-purchase-label" data-translate="productFunnel.shippingCost">
                    {getTranslation('productFunnel.shippingCost')}
                </span>
                <span class="classic-purchase-value" data-price-shipping>
                    {initialOffer.shipping_price.toLocaleString()} {getTranslation('productFunnel.currency')}
                </span>
            </div>
            
            <div 
                class="classic-purchase-row flex justify-between items-center border-b-gray-200"
                data-discount-container
                class:list={[
                    "classic-purchase-row flex justify-between items-center border-b-gray-200",
                    { "hidden": initialOffer.discount === 0 }
                ]}
            >
                <span class="classic-purchase-label" data-translate="productFunnel.discount">
                    {getTranslation('productFunnel.discount')}
                </span>
                <span class="classic-purchase-discount" data-price-discount>
                    - {initialOffer.discount.toLocaleString()} {getTranslation('productFunnel.currency')}
                </span>
            </div>
        </div>
        
        <div class="classic-purchase-total-section">
            <div class="flex justify-between items-center">
                <span class="classic-purchase-total-label" data-translate="productFunnel.total">
                    {getTranslation('productFunnel.total')}
                </span>
                <span class="classic-purchase-total-value" data-price-total>
                    {initialOffer.final_total.toLocaleString()} {getTranslation('productFunnel.currency')}
                </span>
            </div>
        </div>
    </div>
</div>
</div>

<script>
  import { initProductFunnel } from "./ClassicThemeProductFunnel";
  initProductFunnel();
</script>